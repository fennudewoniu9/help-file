架构演进——试错期:
   -- 试错期业务核心问题: 业务不断探索适合的商业模式；
   -- 架构核心关注点: 提升响应速度，快速支持业务上线；
   -- 架构核心原则: 以质量换取速度，可以牺牲一点线上质量(业务可接受范围)来换取更快的响应速度。
   应用发版速度(尤其是IOS)跟不上业务快速迭代的上线周期，动态性是端面临的主要问题，因此端上采用了X的架构：

架构演进——发展期:
   -- 业务核心问题: 隐约看到商业模式，需要加速验证，扩大规模。
   -- 架构关注点: 提升效率(为了有机会去做更多事情,非降低整体成本)，建设更多能力验证业务方向。
   -- 架构演进方向: 前后端的协议、工具的自动化。
      服务端通过Mbaas(服务端提供基础的数据源(商品、用户、搜索、互动)，让客户端/前端通过类SQL的描述一次性获取自己想要的数据，后端不需要增加接口)来实现活动、feeds
      投放的自动化。将更多精力投入到本地化、个性化、数据能力(与算法、推荐、搜索打通)的建设中。
  
   客户端开发关注两个点: 
      - 对外整体连接协议的梳理，对具体的实现进行服务化封装，以方便后续基础能力的可替换。
      - 组件库的建立，新做一个页面的时候，能通过现有的UI组件进行简单组装，不需要从0开始搭建。组件与服务端打通，组件组装逻辑与数据直接由服务端完成，客户端负责解析与渲染。
      因此这个时期客户端更多的工作是支持交互的基础的UI组件和动态适配性。

架构演进——平台期:
   随着业务的发展，JK基于银行+权益+活动体系的业务达到十几种，逐渐向平台期发展。平台期业务与架构核心问题：
   -- 业务核心问题: 需要让更多的第三方参与到代运营平台的建设中，但是平台生态建设又超出了JK自身的能力。
   -- 架构核心关注点: 扩展性(具备接入业务的能力)、业务隔离(已接入业务平稳运行)、平台基础能力建设(业务更好的发展)。
   -- 架构原则: 做一些更基础的规划,然后把更多的可能性、动态性留给二方或者三方完成。
   核心解决因业务发展带来的代码耦合问题，问题主要体现在整体开发、运维效率低，稳定性差。核心思路是分离系统中不可变和可变的部分；分离出”做什么”与”怎么做”、“谁去做”。将业务
   中不变的部分放入主干，定义出做什么；变化的部分以扩展点形式开放出来，让具体的业务放自己来实现,完成怎么做，谁去做。Swak的扩展点实现支持远程调用，可以让业务实现应用级别的
   隔离，相比传统的分包、分模块隔离方式更加彻底。

架构演进——云端一体化:
   随着无线发展，移动研发逐渐向多端化发展(IOT、小程序)。传统的基于Native＋Web＋服务端的开发方式，逐渐出现瓶颈，我们会发现例如：
   -- 端上同学离业务越来越远，服务端同学没时间做底层领域沉淀。
   -- 各端研发之间存在大量的协同, 整体研发效率低下。
   -- 招人也难了，需要同时招多个技术栈的同学；
   在这种背景下, 我们的关注点回到研发效率上,从整体研发架构、研发模式出发, 思考什么样的架构演进、关系重塑才能适合当前的业务形态。我们希望探索出适合“ JK这样规模的具有独立
   APP” 的高效研发架构，形成云端一体化的研发能力，支持一云多端的发展。


微服务拆分原则:
   2个披萨原则: 两个披萨原则最早是由亚马逊 CEO 贝索斯提出的，他认为如果两个披萨不足以喂饱一个项目团队，那么这个团队可能就显得太大了，所以一个服务的人数划分为 5-7 人比较
   合适。因为人数过多的项目将不利于决策的形成，而让一个小团队在一起做项目、开会讨论，则更有利于达成共识，并能够有效促进企业内部的创新。
   康威定律: 你想要架构成为什么样，就将团队分成怎样的结构。比如前后端分离的团队，架构就是基于前后端分离。在基于微服务设计的团队里，一个很好的理念是自管理，团队内部对于自
   己所负责的模块高度负责，进行端对端的开发以及运维。

微服务拆分思想:
   高内聚低耦合，服务粒度适中；以业务模型切入；演进是拆分；阶段性合并。