IM
# http://www.52im.net/thread-307-1-1.html

- openfire: 社区成果，适合小规模产品，100W或者200W用户以后性能会出现问题，并发也不行；开源、免费的是社区版
- 节点: 
  (1)域名(domain identifier)；(2)节点(node identifier)；(3)源(resource identifier)．它的格式是node@domain/resource
  账号，关系链，在线状态显示，消息交互

- 架构:
  连接器的设计：中间件的设计：状态服务器：（需要采取中心节点的方案，否则状态就会不同步）数据库的设计：
  session服务：消息队列服务：状态同步服务：持久数据存储服务：
  网络层--业务层--临时存储／持久存储
      
- 移动端IM客户端的坑: 
  流量：采取哪种协议、图片缩略图、附件的压缩三点决定了流量的大小。
  耗电：(1)流量越小，耗电越低。(2)心跳策略，减少心跳次数，耗电量就会降低。
  心跳时长：wifi，2G，3G，4G，移动、电信、联通,不同网络，不同运行商，NAT失效时间不一样，因此心跳的时间也就不一样。
  网络连接：cmnet和cmwap下连接处理机制。
  网络不稳定：移动端最大的特点就是网络不稳定，在不稳定的网络状态下，如何保证消息以最快的速度到达？如何避免重联风暴？这些既需要从整体架构考虑，也需要在移动端采取巧妙的策略加以避免。

- 数据通信协议: 基本私有化，陌陌是java，whatsapp是erlang。
  - XMPP: 基于xml协议；流量大，在移动终端也耗电，并不适合手机即时通讯，陌陌肯定也是下了不少功夫，但是如果注意观察的话会发现陌陌比QQ费电不少，同时也费流量。
  - MQTT协议: 适配多平台，协议简单，但是需要自己扩展好友，群组等功能。
  - Protobuf协议: 
      优点: 非常小、非常快、非常简单，一条消息数据用Protobuf序列化后的大小是JSON的1/10、XML格式的1/20、是二进制序列化的1/10。
      缺点: 不能表示复杂的数据结构，但是对于IM来讲，已经足够。强烈推荐此协议。
  - 私有协议: 
      优点: 随心所欲，自己定义，流量小。
      缺点: 工作量巨大，扩展性差，需要考虑全面。

- 网络传输协议:
  QQ主要采用UDP协议，MSN主要采用TCP协议，而且他们也都支持HTTP协议的代理模式。




