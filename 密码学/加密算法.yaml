1.ASCII
2.AES
3.Hex
4.Base64
5.UrlBase64




1.ASCII: 包括阿拉伯数字、大小写英语字母和一些控制符，但没有包含双字节编码的字符：中文。因此有了GB2312（2个字节表示一个汉字）、GBK（2个字节表示一个汉字）、UTF-8（3个字节表示一个汉字）等。

2.AES: 较为常用的对称加密算法之一，几乎是所有对称加密算法中安全级别最高的，但java默认支持的密钥长度只有128，官网可扩展到256.

3.Hex: 用于十六进制转换，常配合消息摘要算法处理摘要值。
  API: 
 	  Hex.encode(byte[])  Hex.decode(byte[])

4.Base64: 最初用于电子邮件系统（历史原因电子邮件只允许ASCII码字符，但带有非ASCII的字符通过网关时非ASCII会被调整导致邮件变乱码），“=”是Base64编码的标志性符号。虽然有编码和解码可以充当加密和解密操作，但不是加密算法，类似单表置换算法，原因：1.充当密钥的字符映射表公开，违背了柯克霍夫原则。2.加密强度不高。虽不是加密算法，但是学习加密算法的最好范例。
 	经过Base64编码后的数据长度是原来的4/3倍，且编码后的长度都是4的整数倍。Base64算法常作为密钥、密文和证书的一种通用存储编码格式，且少许调整、保密字符映射表其可成为加密算法。
 	可以解决如中文等非ASCII传输问题，避免这些非ASCII通过网关时出现问题。
  原理: 很多步二进制、十进制的转码操作。
  API: 
 	  Base64.encode(byte[])  Base64.decode(byte[]) 

5.UrlBase64: Base64的衍生算法，将Base64字符映射表中的+和/和=替换成-和_和.，后演变为显示传递Url参数的一种编码算法，可以将二进制数据以Get的方式、符合Url参数规则进行传输。
  解决问题: 
 	  要求使用Get传输本该有Post方式传输的私密数据。非要在Get方式下传递二进制数据。
  API: 
 	  UrlBase64.encode(byte[])  UrlBase64.decode(byte[])