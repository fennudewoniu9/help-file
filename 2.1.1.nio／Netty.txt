0: 阻塞、非阻塞和同步、异步:
		阻塞、非阻塞和同步、异步完全是两回事。阻塞、非阻塞说的是I/O操作的时候是否会block对请求的处理；同步、异步说的是数据从内核态转移到用户态的时候（调
	用systemcall方法后、数据具备后由应用再发起一个copydata的请求还是由asynchronous IO的实现自己完成copydata操作完成数据由内核态到用户态的转移）所
	以，前者说的是对处理的是否阻塞，后者说的是用户态、系统态数据转移过程的主动与否。
	  # http://www.10tiao.com/html/310/201508/229122737/1.html 之 synchronous IO和asynchronous IO的区别
	  Servlet3.1 支持了Asyc NIO

	对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操
	作发生时，它会经历两个阶段：
		1: 等待数据准备 (Waiting for the data to be ready)
		2: 将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)
	正式因为这两个阶段，linux系统产生了下面五种网络模式的方案。
		* 阻塞 I/O（blocking IO）
		* 非阻塞 I/O（nonblocking IO）
		* I/O 多路复用（ IO multiplexing）
		* 异步 I/O（asynchronous IO）
		* 信号驱动 I/O（ signal driven IO）
		注：由于signal driven IO在实际中并不常用，所以我这只提及剩下的四种IO Model。

1: NI/O vs I/O:
	传统同步阻塞I/O模式的弊端有很多：
		性能问题：一连接一线程模型导致服务端的并发接入数和系统吞吐量受到极大限制；
		可靠性问题：由于I/O操作采用同步阻塞模式，当网络拥塞或者通信对端处理缓慢会导致I/O线程被挂住，阻塞时间无法预测；
		可维护性问题：I/O线程数无法有效控制、资源无法有效共享（多线程并发问题），系统可维护性差；

2: 多路复用I/O (epoll、select、poll): 
		IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select/epoll的好处就在于单个process就可以同时
	处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。
		I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就
	可以返回。

	* select: select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限
		制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但是这样也会造成效率的降低。
	* poll: 没有最大数量限制（但是数量过大后性能也是会下降）。 和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符。
	* epoll: epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。
		epoll不同于select和poll轮询的方式，而是callback的回调机制。
	注: 1.epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。
			2.如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟
			  还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。因为blocking IO只调用了一个system call（只是会阻塞）
			3.select 和 poll 的区别：select有连接数上限。select底层是数组，poll底层是链表。支持poll的系统是很少的，所以select有更好的兼容性。

3: 异步 I/O: 
	kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。

4: synchronous IO和asynchronous IO的区别: POSIX的定义是这样子的：
		- A synchronous I/O operation causes the requesting process to be blocked until that I/O operation completes;
		- An asynchronous I/O operation does not cause the requesting process to be blocked;
		参考【0:阻塞、非阻塞和同步、异步】



■ http://ifeve.com/java-nio-all/
■ https://zhuanlan.zhihu.com/p/23488863
Java NIO(New IO)是一个可以替代标准Java IO API的IO API（从Java 1.4开始)，Java NIO提供了与标准IO不同的IO工作方式。

Java NIO: Channels and Buffers（通道和缓冲区）
	标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通
	道中。

Java NIO: Non-blocking IO（非阻塞IO）
	Java NIO可以让你非阻塞的使用IO，例如：当线程从通道读取数据到缓冲区时，线程还是可以进行其他事情。当数据被写入到缓冲区时，线程可以继续处理它。从缓冲
	区写入通道也类似。

Java NIO: Selectors（选择器）
	Java NIO引入了选择器的概念，选择器用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个的线程可以监听多个数据通道。
	Java的Selector对于Linux系统来说，有一个致命限制：同一个channel的select不能被并发的调用。因此，如果有多个I/O线程，必须保证：一个socket只能属于
	一个IoThread，而一个IoThread可以管理多个socket。



虽然Java NIO 中除此之外还有很多类和组件，但在我看来，Channel，Buffer和Selector构成了核心的API。其它组件，如Pipe和FileLock，只不过是与三个核心组
件共同使用的工具类。

Pipe：Java NIO 管道是2个线程之间的单向数据连接。

http://weixiaolu.iteye.com/blog/1479656
http://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html(状态变量:position,limit,capacity)
	现在我们要将数据写到输出通道中。在这之前，我们必须调用flip() 方法。这个方法做两件非常重要的事：
	1.它将 limit 设置为当前 position。
	2.它将 position 设置为 0。
	
	最后一步是调用缓冲区的 clear() 方法。这个方法重设缓冲区以便接收更多的字节。 Clear 做两种非常重要的事情：
	1.它将 limit 设置为与 capacity 相同。
	2.它设置 position 为 0。
http://ifeve.com/buffers/




■ FileChannel无法设置为非阻塞模式，它总是运行在阻塞模式下。
	因为filechannel必须依赖InputStream来读取文件数据。


■ SocketChannel
	非阻塞模式：
	while(! socketChannel.finishConnect() ){
	    //wait, or do something else...
	}




■ Netty
	- mina与netty都是Trustin Lee的作品，所以在很多方面都十分相似 # http://ifeve.com/netty-mina-in-depth-1/
	- Netty主要是对Nio进行了封装，解决了复杂调用、规避了潜在bug的风险，比如epoll空转导致CPU利用率100%的问题（底层操作系
		统在没有获得selectKey的时候，即返回0的时候，也会改变坚挺状态，导致JDK调用select.selector（）方法的时候依然会返回值，不停的执行
		while代码块，具体参考：http://www.10tiao.com/html/308/201602/401718035/1.html）
	- netty和mina(android 长链接，参考icloud note)属于NIO封装框架。Tomcat使用了相关的技术，但属于servlet容器。
	- 为了尽可能提升性能，Netty采用了串行无锁化设计

# http://www.cnblogs.com/Irving/p/5709130.html
■ Netty 采用了比较典型的三层网络架构进行设计，逻辑架构图如下所示：
	第一层：Reactor 通信调度层，负责将网络层的数据 读取到内存缓冲区中，然后触发各种网络事件
	第二层：职责链 PipeLine，负责事件在职责链中的有序传播，同时负责动态的 编排职责链；不同的应用的
		Handler 节点的功能也不同，通常情况下，往往 会开发编解码 Hanlder 用于消息的编解码，它可以将
		外部的协议消息转换成内部的 POJO 对象，这样上层业务侧只需要关心处理业务逻辑即可，不需要感知底
		层的协议差异和线程模型差异，实现了架构层面的分层隔离。
	第三层：业务逻辑处理层，可以分为两类：
		纯粹的业务逻辑处理，例如订单处理。
		应用层协议管理，例如HTTP协议、FTP协议等。

■ 线程调度模型
	- Reactor单线程模型
	- Reactor多线程模型
	- 主从Reactor多线程模型
	# 在启动辅助类中创建不同的EventLoopGroup实例并通过适当的参数配置，就可以支持上述三种线程模型

■ 序列化方式
	Netty默认提供了对Google Protobuf的支持 # 扩展：Java序列化的性能只有二进制编码的6.17%左右

■ 链路有效性检测
	Netty提供的心跳检测机制分为三种：
		读空闲，链路持续时间t没有读取到任何消息
		写空闲，链路持续时间t没有发送任何消息
		读写空闲，链路持续时间t没有接收或者发送任何消息
		
		# 当网络发生单通、连接被防火墙Hang住、长时间GC或者通信线程发生非预期异常时，会导致链路不可用且不易被
		# 及时发现。特别是异常发生在凌晨业务低谷期间，当早晨业务高峰期到来时，由于链路不可用会导致瞬间的大批量
		# 业务失败或者超时，这将对系统的可靠性产生重大的威胁。
		# 从技术层面看，要解决链路的可靠性问题，必须周期性的对链路进行有效性检测。目前最流行和通用的做法就是心
		# 跳检测。

		# 跳检测机制分为三个层面：
		# 	TCP层面的心跳检测，即TCP的Keep-Alive机制，它的作用域是整个TCP协议栈；
		# 	协议层的心跳检测，主要存在于长连接协议中。例如SMPP协议；
		# 	应用层的心跳检测，它主要由各业务产品通过约定方式定时给对方发送心跳消息实现。

■ 流量整形
	流量整形（Traffic Shaping）是一种主动调整流量输出速率的措施。Netty的流量整形有两个作用：
		防止由于上下游网元性能不均衡导致下游网元被压垮，业务流程中断；
		防止由于通信模块接收消息过快，后端业务线程处理不及时导致的“撑死”问题。
		# 流量整形与流量监管的另一区别是，整形可能会增加延迟，而监管几乎不引入额外的延迟。

	Netty支持两种流量整形模式：
		全局流量整形：全局流量整形的作用范围是进程级的，无论你创建了多少个Channel，它的作用域针对所有的
								Channel。用户可以通过参数设置：报文的接收速率、报文的发送速率、整形周期。
		链路级流量整形：单链路流量整形与全局流量整形的最大区别就是它以单个链路为作用域，可以对不同的链路
								设置不同的整形策略。	

■ 优雅停机
	Netty的优雅停机三部曲：
		不再接收新消息
		退出前的预处理操作
		资源的释放操作
	# Java的优雅停机通常通过注册JDK的ShutdownHook来实现，当系统接收到退出指令后，首先标记系统处于退
	# 出状态，不再接收新的消息，然后将积压的消息处理完，最后调用资源回收接口将资源销毁，最后各线程退出执行。
	# 通常优雅退出需要有超时控制机制，例如30S，如果到达超时时间仍然没有完成退出前的资源回收等操作，则由停
	# 机脚本直接调用kill -9 pid，强制退出。





























