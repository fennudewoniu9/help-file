https://blog.csdn.net/kxcfzyk/article/details/38613861
上图不是非常精准，但是能够比较清晰地展示现有Java日志体系的主体架构。Java日志体系大体可以分为三个部分：日志门面接口、桥接器、日志框架具体实现。实际情况并不总是简单
的“日志门面接口-->桥接器-->日志框架”这一条单向线。实际上，独立的桥接器有时候是不需要的，而且也并不是只有将日志门面API转调到具体日志框架API的桥接器，也存在将日志框
架API转调到日志门面API的桥接器。
  日志门面接口: sl4j,common-logging（最早的日志门面接口是commons-logging，但目前最受欢迎的是slf4j）
  日志门面实现: log4j,logback,jul（jcl虽然不是什么日志框架的具体实现，但是它的API仍然是能够被转调回slf4j的）
  桥接器: slf4j-log4j12,log4j-over-slf4j,jcl-over-slf4j,slf4j-jcl

1. slf4j-api: 作为日志接入的接口：编译时slf4j-api中public final class LoggerFactor类中private final static void bind()方法会寻找具体的日志实现类绑定，主要通过StaticLoggerBinder.getSingleton()的语句调用。
2. slf4j-log4j12: 是链接slf4j-api和log4j中间的适配器，它实现了slf4j-api中StaticLoggerBinder接口，从而使得在编译时绑定的是slf4j-log4j12的getSingleton()方法。
3. log4j: 是具体的日志系统：通过slf4j-log4j12初始化Log4j，达到最终日志的输出。

logback和slf4j出自同一人之手，所以不需要适配器
看完三种情形以后，会发现几乎所有其他日志框架的API，包括jcl的API，都能够随意的转调回slf4j。但是有一个唯一的限制就是转调回slf4j的日志框架不能跟slf4j当前桥接到的日志框
架相同。这个限制就是为了防止A-to-B.jar跟B-to-A.jar(slf4j-to-log4j.jar跟log4j-to-slf4j.jar)同时出现在类路径中，从而导致A和B一直不停地互相递归调用，最后堆栈溢出。
目前这个限制并不是通过技术保证的，仅仅靠开发者自己保证，这也是为什么slf4j官网上要强调所有合理的方式只有上图的三种情形。（循环调用引起的堆栈溢出
https://blog.csdn.net/kxcfzyk/article/details/38613861）