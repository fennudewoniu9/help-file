一. 六种代理方式: 
  http重定向、DNS负载均衡、反向代理负载均衡、
  IP负载均衡(LVS-NAT)(4层:传输层)、直接路由(LVS-DR)(2层:数据链路层)、IP隧道(LVS-TUN)
  参考: https://my.oschina.net/u/3341316/blog/877206
       七层网络模型：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层

  1: http重定向
    请求的开销和处理实际请求的开销，前者相对于后者越小，那么重定向的意义就越大，例如下载。

  2: DNS负载均衡
    使用dig命令来看下"baidu"的DNS设置：dig baidu.com
    - DNS智能解析实现地域就近访问

  3: 反向代理负载均衡
    相比前面的HTTP重定向和DNS解析，反向代理的调度器扮演的是用户和实际服务器中间人的角色：
    1、任何对于实际服务器的HTTP请求都必须经过调度器
    2、调度器必须等待实际服务器的HTTP响应，并将它反馈给用户（前两种方式不需要经过调度反馈，是实际服务器直接发送给用户）

    特性：
    - 调度策略丰富。例如可以为不同的实际服务器设置不同的权重，以达到能者多劳的效果。
    - 对反向代理服务器的并发处理能力要求高，因为它工作在HTTP层面。
    - 反向代理服务器进行转发操作本身是需要一定开销的，比如创建线程、与后端服务器建立TCP连接、接收后端服务器返回的处理结果、
      分析HTTP头部信息、用户空间和内核空间的频繁切换等，虽然这部分时间并不长，但是当后端服务器处理请求的时间非常短时，转发的
      开销就显得尤为突出。例如请求静态文件，更适合使用前面介绍的基于DNS的负载均衡方式。
    - 反向代理服务器可以监控后端服务器，比如系统负载、响应时间、是否可用、TCP连接数、流量等，从而根据这些数据调整负载均衡的策略。
    - 反向代理服务器可以让用户在一次会话周期内的所有请求始终转发到一台特定的后端服务器上（粘滞会话），这样的好处一是保持session
      的本地访问，二是防止后端服务器的动态内存缓存的资源浪费。

  4: IP负载均衡(LVS-NAT)
    工作在网络分层模型的传输层（第四层）
    # 因为反向代理服务器工作在HTTP层，其本身的开销就已严重制约了可扩展性，从而也限制了它的性能极限。那能否在HTTP层面以下实现负载均衡呢？
    # NAT服务器: 它工作在传输层，它可以修改发送来的IP数据包，将数据包的目标地址修改为实际服务器地址。
    # 从Linux2.4内核开始，其内置的Neftilter模块在内核中维护着一些数据包过滤表，这些表包含了用于控制数据包过滤的规则。可喜的是，Linux
    # 提供了iptables来对过滤表进行插入、修改和删除等操作。更加令人振奋的是，Linux2.6.x内核中内置了IPVS模块，它的工作性质类型于
    # Netfilter模块，不过它更专注于实现IP负载均衡。

    # 实验证明使用基于NAT的负载均衡系统。作为调度器的NAT服务器吞吐率几乎是反向代理服务器的两倍以上，因为在内核中进行请求转发的较低开销。
    # 但一旦请求的内容过大，不论是基于反向代理还是NAT，负载均衡的整体吞吐量都差距不大，这说明对于一睦开销较大的内容，使用简单的反向代理
    # 来搭建负载均衡系统是值考虑的。原因是NAT服务器的网络带宽，包括内部网络和外部网络。（交换机可以解决）

  5: IP隧道(LVS-TUN)（IP封装技术）
    工作在数据链路层（第三层？），基于IP隧道的请求转发机制：将调度器收到的IP数据包封装在一个新的IP数据包中，转交给实际服务器，然后实际服
    务器的响应数据包可以直接到达用户端。目前Linux大多支持，可以用LVS来实现，称为LVS-TUN，与LVS-DR不同的是，实际服务器可以和调度器不在
    同一个WAN网段，调度器通过IP隧道技术来转发请求到实际服务器，所以实际服务器也必须拥有合法的IP地址。

  6: 直接路由(LVS-DR)
    工作在数据链路层（第二层），通过修改数据包的目标MAC地址（没有修改目标IP），将数据包转发到实际服务器上，不同的是，实际服务器的响应数
    据包将直接发送给客户羰，而不经过调度器。
    实现方式: 通过修改MAC地址配合 "回环接口" 实现（eth1上抓包抓不到的接口）
    # LVS-DR 相较于LVS-NAT的最大优势在于LVS-DR不受调度器宽带的限制，例如假设三台服务器在WAN交换机出口宽带都限制为10Mbps，只要对于连
    # 接调度器和两台实际服务器的LAN交换机没有限速，那么，使用LVS-DR理论上可以达到20Mbps的最大出口宽带，因为它的实际服务器的响应数据包
    # 可以不经过调度器而直接发往用户端啊，所以它与调度器的出口宽带没有关系，只能自身的有关系。而如果使用LVS-NAT，集群只能最大使用10Mbps
    # 的宽带。所以，越是响应数据包远远超过请求数据包的服务，就越应该降低调度器转移请求的开销，也就越能提高整体的扩展能力，最终也就越依赖于
    # WAN出口宽带。
    总的来说，LVS-DR适合搭建可扩展的负载均衡系统，不论是Web、文件、视频服务器，都有出色的性能。前提是必须为实际器买一系列的合法IP地址。

  三种lvs方式比较: 
    - 当服务器结点数目升到20时，调度器本身有可能成为系统的新瓶颈，因为在LVS/NAT中请求和响应报文都需要通过负载调度器。
    - LVS-TUN、LVS-DR对于响应的报文都可以不经过调度器。
    - LVS-DR跟LVS-TUN相比，没有IP隧道的开销，但是要求负载调度器与实际服务器都有一块网卡连在同一物理网段上。
    - LVS-DR支持通过广域网进行负载均衡。

总体来说，LVS-DR和LVS-TUN都适合响应和请求不对称的Web服务器，如何从它们中做出选择，取决于你的网络部署需要，因为LVS-TUN可以将实际
服务器根据需要部署在不同的地域，并且根据就近访问的原则来转移请求，所以有类似这种需求的，就应该选择LVS-TUN。




二. LVS - Nginx - HAProxy:
  从性能和稳定上还是LVS最牛，基本达到了F5硬件设备的60%性能，其他几个10%都有点困难。不过就因为LVS忒牛了，配置也最麻烦了，而且健康检测
  需要另外配置Ldirector，其他HAPROXY和NGINX自己就用，而且配置超级简单。所以建议，如果网站访问量不是门户级别的用HAPROXY或者NGINX
  就OK了，到了门户级别在用LVS+Idirector
  参考: http://blog.csdn.net/gzh0222/article/details/8540604
        https://my.oschina.net/u/3341316/blog/877206

  1: LVS(Linux Virtual Server)
      工作在网络的4层(物理层、数据链路层、网络层、传输层、会话层、表示层、应用层)
      是一种集群(Cluster)技术，采用IP负载均衡技术和基于内容请求分发技术。调度器具有很好的吞吐率，将请求均衡地转移到不同的服务器上
      执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器。

    - 抗负载能力强，因为lvs工作方式的逻辑是非常之简单，而且工作在网络4层仅做请求分发之用，没有流量，所以在效率上基本不需要太过考虑。
    - 无流量，上面已经有所提及了。lvs仅仅分发请求，而流量并不从它本身出去，所以可以利用它这点来做一些线路分流之用。没有流量同时也保
      住了均衡器的IO性能不会受到大流量的影响。
    - 基本上能支持所有应用，因为lvs工作在4层，所以它可以对几乎所有应用做负载均衡，包括http、数据库、聊天室等等。
    - 配置性低，工作稳定
    - LVS需要向IDC多申请一个IP来做Visual IP，因此需要一定的网络知识，所以对操作人的要求比较高。
    
    LVS的优点:
      性能好，接近硬件设备的网络吞吐和连接负载能力。
      LVS的DR模式，支持通过广域网进行负载均衡。这个其他任何负载均衡软件目前都不具备。
    缺点:
      比较重型。另外社区不如nginx活跃。


  2: Nginx
      工作在网络的7层(物理层、数据链路层、网络层、传输层、会话层、表示层、应用层)

    - nginx工作在网络的7层，所以它可以针对http应用本身来做分流策略，比如针对域名、目录结构等，相比之下lvs并不具备这样的功能，所以
      nginx单凭这点可利用的场合就远多于lvs了: 但nginx有用的这些功能使其可调整度要高于lvs，所以经常要去触碰触碰，由lvs的第2条优点看，
      触碰多了，人为出问题的几率也就会大。
    - nginx对网络的依赖较小，理论上只要ping得通，网页访问正常，nginx就能连得通: nginx同时还能区分内外网，如果是同时拥有内外网的节点，
      就相当于单机拥有了备份线路；lvs就比较依赖于网络环境，目前来看服务器在同一网段内并且lvs使用direct方式分流，效果较能得到保证。另外
      注意，lvs需要向托管商至少申请多一个ip来做Visual IP，貌似是不能用本身的IP来做VIP的。要做好LVS管理员，确实得跟进学习很多有关网络
      通信方面的知识，就不再是一个HTTP那么简单了。
    - nginx安装和配置比较简单，测试起来也很方便，因为它基本能把错误用日志打印出来。lvs的安装和配置、测试就要花比较长的时间了，因为同上
      所述，lvs对网络依赖比较大，很多时候不能配置成功都是因为网络问题而不是配置问题，出了问题要解决也相应的会麻烦得多。
    - nginx也同样能承受很高负载且稳定，但负载度和稳定度差lvs还有几个等级: nginx处理所有流量所以受限于机器IO和配置；本身的bug也还是
      难以避免的；nginx没有现成的双机热备方案，所以跑在单机上还是风险较大，单机上的事情全都很难说。
    - nginx可以检测到服务器内部的故障: 比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点。目前
      lvs中ldirectd也能支持针对服务器内部的情况来监控，但lvs的原理使其不能重发请求。重发请求这点，譬如用户正在上传一个文件，而处理
      该上传的节点刚好在上传过程中出现故障，nginx会把上传切到另一台服务器重新处理，而lvs就直接断掉了，如果是上传一个很大的文件或者很
      重要的文件的话，用户可能会因此而恼火。
    - nginx对请求的异步处理可以帮助节点服务器减轻负载: 假如使用apache直接对外服务，那么出现很多的窄带链接时apache服务器将会占用大量
      内存而不能释放，使用多一个nginx做apache代理的话，这些窄带链接会被nginx挡住，apache上就不会堆积过多的请求，这样就减少了相当多
      的内存占用。这点使用squid也有相同的作用，即使squid本身配置为不缓存，对apache还是有很大帮助的。lvs没有这些功能，也就无法能比较。
    - nginx能支持http和email（email的功能估计比较少人用），lvs所支持的应用在这点上会比nginx更多。

    - 在使用上，一般最前端所采取的策略应是lvs，也就是DNS的指向应为lvs均衡器，lvs的优点令它非常适合做这个任务。
    - nginx可作为lvs节点机器使用，一是可以利用nginx的功能，二是可以利用nginx的性能。当然这一层面也可以直接使用squid，squid的功能
      方面就比nginx弱不少了，性能上也有所逊色于nginx。
    - nginx也可作为中层代理使用，这一层面nginx基本上无对手，唯一可以撼动nginx的就只有lighttpd了，不过lighttpd目前还没有能做到
      nginx完全的功能，配置也不那么清晰易读。另外，中层代理的IP也是重要的，所以中层代理也拥有一个VIP和lvs是最完美的方案了。
    - nginx也可作为网页静态服务器，不过超出了本文讨论的范畴，简单提一下。

    Nginx的优点:
      性能好，可以负载超过1万的并发。
      功能多，除了负载均衡，还能作Web服务器，而且可以通过Geo模块来实现流量分配。
      社区活跃，第三方补丁和模块很多
      支持gzip proxy
    缺点:
      不支持session保持。？
      对后端realserver的健康检查功能效果不好。而且只支持通过端口来检测，不支持通过url来检测。
      nginx对big request header的支持不是很好，如果client_header_buffer_size设置的比较小，就会返回400bad request页面。

    扩展: session保持解决方案：ip_hash/upstream_hash:因仅能用ip一个因子分配后端,so只能用在最前端,后端还有其它负载均衡时也不能用
                            https://my.oschina.net/MrMichael/blog/293832?p=1


  3: HAProxy
      工作在网络7层(物理层、数据链路层、网络层、传输层、会话层、表示层、应用层)

    - 更多的负载均衡策略比如：动态加权轮循(Dynamic Round Robin)，加权源地址哈希(Weighted Source Hash)，加权URL哈希和加权参
      数哈希(Weighted Parameter Hash)已经实现
    - HAProxy可以对mysql进行负载均衡，对后端的DB节点进行检测和负载均衡。
    - 支持url检测后端的服务器出问题的检测会有很好的帮助。

    优点:
      它的优点正好可以补充nginx的缺点。支持session保持，同时支持通过获取指定的url来检测后端服务器的状态。
      支持tcp模式的负载均衡。比如可以给MySQL的从服务器集群和邮件服务器做负载均衡。
    缺点:
      不支持虚拟主机(这个很傻)
      目前没有nagios和cacti的性能监控模板

三. 现在网站发展的趋势对网络负载均衡的使用是随着网站规模的提升根据不同的阶段来使用不同的技术: 
  第一阶段: 利用Nginx或者HAProxy进行单点的负载均衡，这一阶段服务器规模刚脱离开单服务器、单数据库的模式，需要一定的负载均衡，但是
    仍然规模较小没有专业的维护团队来进行维护，也没有需要进行大规模的网站部署。这样利用Nginx或者HAproxy就是第一选择，此时这些东西
    上手快， 配置容易，在七层之上利用HTTP协议就可以。这时是第一选择
  第二阶段: 随着网络服务进一步扩大，这时单点的Nginx已经不能满足，这时使用LVS或者商用F5就是首要选择，Nginx此时就作为LVS或者 F5的
    节点来使用，具体LVS或者F5的是选择是根据公司规模，人才以及资金能力来选择的，这里也不做详谈，但是一般来说这阶段相关人才跟不上业务
    的提 升，所以购买商业负载均衡已经成为了必经之路。
  第三阶段: 这时网络服务已经成为主流产品，此时随着公司知名度也进一步扩展，相关人才的能力以及数量也随之提升，这时无论从开发适合自身产
    品的定制，以及降低成本来讲开源的LVS，已经成为首选，这时LVS会成为主流。
  最终形成比较理想的状态为: F5/LVS<—>Haproxy/Nginx<—>Squid/Varnish<—>AppServer。


















