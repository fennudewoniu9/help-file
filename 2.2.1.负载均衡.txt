一. 六种负载均衡方式: 
  http重定向、DNS负载均衡、反向代理负载均衡、
  IP负载均衡(LVS-NAT)(4层:传输层)、直接路由(LVS-DR)(2层:数据链路层)、IP隧道(LVS-TUN)
  参考: https://my.oschina.net/u/3341316/blog/877206
       七层网络模型：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层

  1: http重定向
    请求的开销和处理实际请求的开销，前者相对于后者越小，那么重定向的意义就越大，例如下载。

  2: DNS负载均衡
    使用dig命令来看下"baidu"的DNS设置：dig baidu.com
    - DNS智能解析实现地域就近访问
    - nslookup VS dig
      先敲一个nslookup，进去后再敲 server 10.222.10.10 ，然后再敲你需要解析的域名。
      dig @10.222.10.10 www.dl.com 就是指定10.222.10.10做dns解析。


  3: 反向代理负载均衡
    相比前面的HTTP重定向和DNS解析，反向代理的调度器扮演的是用户和实际服务器中间人的角色：
    1、任何对于实际服务器的HTTP请求都必须经过调度器
    2、调度器必须等待实际服务器的HTTP响应，并将它反馈给用户（前两种方式不需要经过调度反馈，是实际服务器直接发送给用户）

    特性：
    - 调度策略丰富。例如可以为不同的实际服务器设置不同的权重，以达到能者多劳的效果。
    - 对反向代理服务器的并发处理能力要求高，因为它工作在HTTP层面。
    - 反向代理服务器进行转发操作本身是需要一定开销的，比如创建线程、与后端服务器建立TCP连接、接收后端服务器返回的处理结果、
      分析HTTP头部信息、用户空间和内核空间的频繁切换等，虽然这部分时间并不长，但是当后端服务器处理请求的时间非常短时，转发的
      开销就显得尤为突出。例如请求静态文件，更适合使用前面介绍的基于DNS的负载均衡方式。
    - 反向代理服务器可以监控后端服务器，比如系统负载、响应时间、是否可用、TCP连接数、流量等，从而根据这些数据调整负载均衡的策略。
    - 反向代理服务器可以让用户在一次会话周期内的所有请求始终转发到一台特定的后端服务器上（粘滞会话），这样的好处一是保持session
      的本地访问，二是防止后端服务器的动态内存缓存的资源浪费。

  -------------------------------------------------------------------------------------------------------------------
  LVS: Linux Virtual Server我们国家的章文嵩博士的一个开源项目。在linux内存2.6中，它已经成为内核的一部分，在此之前的内核版本则需要重
       新编译内核。工作在网络层，可以实现高性能，高可用的服务器集群技术，其中NAT/TUN/DR分别修改第四、三、二层网络协议。从性能和稳定上还
       是LVS最牛，基本达到了F5硬件设备的60%性能，其他几个10%都有点困难。不过就因为LVS忒牛了，配置也最麻烦了。
  VIP: 外部直接面向用户请求，作为用户请求的目标的IP地址
  DIP/RIP: 如下
  DS: Director Server，指的是前端负载均衡器节点，对应的IP是DIP（主要用于和内部主机通讯的IP地址）
  RS: Real Server，后端真实的工作服务器，对应的IP是RIP
  CIP: 访问客户端的IP地址
  -------------------------------------
  CIP ---> VIP --防火墙--> DIP ---> RIP
  -------------------------------------
  -------------------------------------------------------------------------------------------------------------------
  4: LVS - NAT(Netowrk Address Translation): 第三层-网络层
    # LVS调度算法、模型、模型原理：https://www.cnblogs.com/liwei0526vip/p/6370103.html（包含网络图）
    LVS充当网关的角色，所有的网络报文（请求／响应）的进出都要经过LVS。
    *客户端发起请求，数据包到达lvs
    *lvs做目标地址转换（DNAT），将目标ip改为RS的ip
    *RS进行业务逻辑处理，返回响应数据，源ip是RS的ip，目标ip是客户端的ip
    *数据包经过LVS网关中转，源地址转换（SNAT），将源ip改为LVS的ip
    *客户端无法感知后端RS的存在
    *缺陷：对Director Server压力会比较大，请求和响应都需经过director server
    # 因为反向代理服务器工作在HTTP层，其本身的开销就已严重制约了可扩展性，从而也限制了它的性能极限。那能否在HTTP层面以下实现负载均衡呢？
    # NAT服务器: 它工作在传输层，它可以修改发送来的IP数据包，将数据包的目标地址修改为实际服务器地址。
    # 从Linux2.4内核开始，其内置的Neftilter模块在内核中维护着一些数据包过滤表，这些表包含了用于控制数据包过滤的规则。可喜的是，Linux
    # 提供了iptables来对过滤表进行插入、修改和删除等操作。更加令人振奋的是，Linux2.6.x内核中内置了IPVS模块，它的工作性质类型于
    # Netfilter模块，不过它更专注于实现IP负载均衡。

    # 实验证明使用基于NAT的负载均衡系统。作为调度器的NAT服务器吞吐率几乎是反向代理服务器的两倍以上，因为在内核中进行请求转发的较低开销。
    # 但一旦请求的内容过大，不论是基于反向代理还是NAT，负载均衡的整体吞吐量都差距不大，这说明对于一睦开销较大的内容，使用简单的反向代理
    # 来搭建负载均衡系统是值考虑的。原因是NAT服务器的网络带宽，包括内部网络和外部网络。（交换机可以解决）

  5: LVS - DR(直接路由):  第二层-数据链路层
    lvs接收到，将网络帧的MAC地址修改为某一台Real Server的MAC，数据包就会被转发给相应的RS处理（数据包的源ip和目标ip都没有变，只是服务
    器的mac变了）而Real Server将响应直接返回给客户，免去了VS/TUN中的IP隧道开销。这种方式是三种负载调度机制中性能最高最好的，但是必须
    要求Director Server与Real Server都有一块网卡连在同一物理网段上（实际是VLAN）。
    实现方式: 
    # LVS-DR 相较于LVS-NAT的最大优势在于LVS-DR不受调度器宽带的限制，例如假设三台服务器在WAN交换机出口宽带都限制为10Mbps，只要对于连
    # 接调度器和两台实际服务器的LAN交换机没有限速，那么，使用LVS-DR理论上可以达到20Mbps的最大出口宽带，因为它的实际服务器的响应数据包
    # 可以不经过调度器而直接发往用户端啊，所以它与调度器的出口宽带没有关系，只能自身的有关系。而如果使用LVS-NAT，集群只能最大使用10Mbps
    # 的宽带。所以，越是响应数据包远远超过请求数据包的服务，就越应该降低调度器转移请求的开销，也就越能提高整体的扩展能力，最终也就越依赖于
    # WAN出口宽带。
    总的来说，LVS-DR适合搭建可扩展的负载均衡系统，不论是Web、文件、视频服务器，都有出色的性能。

  6: LVS - TUN(Virtual Server via IP Tunneling／IP隧道):  第三层-网络层
    和NAT基本一样，基于IP隧道的请求转发机制：将LVS收到的IP数据包封装在一个新的IP数据包中，Real server是直接返回数据给客户端，不需要经
    过Diretor server,这大大降低了Diretor server的压力。并且，与LVS-DR不同的是，实际服务器可以和调度器不在同一个WAN网段，LVS通过IP
    隧道技术来转发请求到实际服务器，所以实际服务器也必须拥有合法的IP地址。RIP、VIP、DIP全是公网地址。

  三种lvs方式比较: 
    - 当服务器结点数目升到20时，调度器本身有可能成为系统的新瓶颈，因为在LVS/NAT中请求和响应报文都需要通过负载调度器。
    - LVS-TUN、LVS-DR对于响应的报文都可以不经过调度器。
    - LVS-DR跟LVS-TUN相比，没有IP隧道的开销，但是要求负载调度器与实际服务器都有一块网卡连在同一物理网段上（实际是VLAN）。
    - LVS-TUN支持通过广域网进行负载均衡。
    总体来说，LVS-DR和LVS-TUN都适合响应和请求不对称的Web服务器，如何从它们中做出选择，取决于你的网络部署需要，因为LVS-TUN可以将实际
    服务器根据需要部署在不同的地域，并且根据就近访问的原则来转移请求，所以有类似这种需求的，就应该选择LVS-TUN。
    #    　　　　　　　　　VS/NAT　　　　 VS/TUN　　　　　　VS/DR
    # 服务器操作系统　　　　任意　　　　　　支持隧道　　　　　多数(支持Non-arp )
    # 服务器网络　　　　　　私有网络　　　　局域网/广域网　　 局域网
    # 服务器数目(100M网络) 10-20　　　　　100　　　　　　　 多(100)
    # 服务器网关　　　　　　负载均衡器　　　自己的路由　　　　自己的路由
    # 效率　　　　　　　　　一般　　　　　　高　　　　　　　　最高

  LVS调度算法: 
    -s 指定服务采用的算法，常用的算法参数如下:
    * rr 轮叫/轮循（Round Robin）
    * wrr 加权轮叫（Weighted Round Robin）
    * dh 目标地址散列（Destination Hashing）
    * sh 源地址散列（Source Hashing）
    * lc 最少链接（Least Connections）
    * wlc 加权最少链接（Weighted Least Connections）
    * lblc 基于局部性的最少链接（Locality-Based Least Connections）
    * lblcr 带复制的基于局部性最少链接（Locality-Based Least Connections with Replication）


一点一. LVS结合keepalive:
  LVS可以实现负载均衡，但是不能够进行健康检查，比如一个rs出现故障，LVS 仍然会把请求转发给故障的rs服务器，这样就会导致请求的无效性。
  keepalive 软件可以进行健康检查，而且能同时实现 LVS 的高可用性，解决 LVS 单点故障的问题，其实 keepalive 就是为 LVS 而生的。


# http://www.ha97.com/5646.html
二. LVS - Nginx - HAProxy:
  从性能和稳定上还是LVS最牛，基本达到了F5硬件设备的60%性能，其他几个10%都有点困难。不过就因为LVS忒牛了，配置也最麻烦了，而且健康检测
  需要另外配置Ldirector，其他HAPROXY和NGINX自己就用，而且配置超级简单。所以建议，如果网站访问量不是门户级别的用HAPROXY或者NGINX
  就OK了，到了门户级别在用LVS+Idirector
  参考: http://blog.csdn.net/gzh0222/article/details/8540604
        https://my.oschina.net/u/3341316/blog/877206

  1: LVS(Linux Virtual Server)
      1.抗负载能力强、是工作在网络4层之上仅作分发之用，没有流量的产生: 这个特点也决定了它在负载均衡软件里的性能最强的，对内存和cpu资源
        消耗比较低。
      2.配置性比较低，这是一个缺点也是一个优点: 因为没有可太多配置的东西，所以并不需要太多接触，大大减少了人为出错的几率。
      3.工作稳定，因其本身抗负载能力很强，自身有完整的双机热备方案,如LVS+Keepalived: 不过一般项目实施中用得最多的还是LVS/DR+Keepalived
      4.无流量，LVS只分发请求，而流量并不从它本身出去: 这点保证了均衡器IO的性能不会收到大流量的影响。
      5.应用范围比较广，因为LVS工作在4层: 所以它几乎可以对所有应用做负载均衡，包括http、数据库、在线聊天室等等。
    
    缺点:
      1.软件本身不支持正则表达式处理，不能做动静分离: 而现在许多网站在这方面都有较强的需求，这个是Nginx/HAProxy+Keepalived的优势所在。
      2.如果是网站应用比较庞大的话，LVS/DR+Keepalived实施起来就比较复杂: 特别后面有Windows Server的机器的话，如果实施及配置还有维护
        过程就比较复杂了，相对而言，Nginx/HAProxy+Keepalived就简单多了。

  2: Nginx
      工作在网络的7层(物理层、数据链路层、网络层、传输层、会话层、表示层、应用层)
      1.工作在网络的7层之上，可以针对http应用做一些分流的策略: 比如针对域名、目录结构，它的 正则规则 比HAProxy更为强大和灵活，这也是它目前
        广泛流行的主要原因之一，Nginx单凭这点可利用的场合就远多于LVS了。
      2.Nginx对网络稳定性的依赖非常小: 理论上能ping通就就能进行负载功能，这个也是它的优势之一；相反LVS对网络稳定性依赖比较大。
      3.Nginx安装和配置比较简单，测试起来比较方便: 它基本能把错误用日志打印出来。LVS的配置、测试就要花比较长的时间了。
      3.可以承担高负载压力且稳定，热部署（reaload ）: 在硬件不差的情况下一般能支撑几万次的并发量，负载度比LVS相对小些。
      4.Nginx可以通过端口检测到服务器内部的故障: 比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点，
        不过其中缺点就是不支持url来检测。比如用户正在上传一个文件，而处理该上传的节点刚好在上传过程中出现故障，Nginx会把上传切到另一台服务器
        重新处理，而LVS就直接断掉了，如果是上传一个很大的文件或者很重要的文件的话，用户可能会因此而不满。 # --------重点--------
      5.Nginx不仅仅是一款优秀的负载均衡器/反向代理软件，它同时也是功能强大的Web应用服务器: LNMP也是近几年非常流行的web架构，在高流量的环境
        中稳定性也很好。
      6.Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快: 可以考虑用其作为反向代理加速器。
      7.Nginx可作为中层反向代理使用，这一层面Nginx基本上无对手: 唯一可以对比Nginx的就只有lighttpd了，不过lighttpd目前还没有做到Nginx完
        全的功能，配置也不那么清晰易读，社区资料也远远没Nginx活跃。
      8.Nginx也可作为静态网页和图片服务器，这方面的性能也无对手: 比如做一个静态展示网站
      9.还有Nginx社区非常活跃，第三方模块也很多: 淘宝的前端使用的Tengine就是基于nginx做的二次开发定制版。
    
    缺点:
      1、Nginx仅能支持http、https和Email协议，这样就在适用范围上面小些，这个是它的缺点。
      2、对后端服务器的健康检查，只支持通过端口来检测，不支持通过url来检测。不支持Session的直接保持，但能通过ip_hash来解决。

    扩展: session保持解决方案：ip_hash/upstream_hash:因仅能用ip一个因子分配后端,so只能用在最前端,后端还有其它负载均衡时也不能用
                            https://my.oschina.net/MrMichael/blog/293832?p=1

  3: HAProxy
      1.HAProxy也是支持虚拟主机的。
      2.HAProxy的优点能够补充Nginx的一些缺点，比如支持Session的保持，Cookie的引导；同时支持通过获取指定的url来检测后端服务器的状态。
      3.HAProxy跟LVS类似，本身就只是一款负载均衡软件；单纯从效率上来讲HAProxy会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的。
      4.HAProxy支持TCP协议的负载均衡转发，可以对MySQL读进行负载均衡，对后端的MySQL节点进行检测和负载均衡，大家可以用LVS+Keepalived对MySQL
        主从做负载均衡。
      5.HAProxy负载均衡策略非常多，HAProxy的负载均衡算法现在具体有如下8种：
      ① roundrobin，表示简单的轮询，这个不多说，这个是负载均衡基本都具备的；
      ② static-rr，表示根据权重，建议关注；
      ③ leastconn，表示最少连接者先处理，建议关注；
      ④ source，表示根据请求源IP，这个跟Nginx的IP_hash机制类似，我们用其作为解决session问题的一种方法，建议关注；
      ⑤ ri，表示根据请求的URI；
      ⑥ rl_param，表示根据请求的URl参数’balance url_param’ requires an URL parameter name；
      ⑦ hdr(name)，表示根据HTTP请求头来锁定每一次HTTP请求；
      ⑧ rdp-cookie(name)，表示根据据cookie(name)来锁定并哈希每一次TCP请求。

    缺点:
      1.不支持 POP/SMTP 协议
      2.不支持 SPDY 协议
      3.不支持 HTTP cache 功能。现在不少开源的 lb 项目，都或多或少具备 HTTP cache 功能。
      4.重载配置的功能需要重启进程，虽然也是 soft restart，但没有 Nginx 的 reaload 更为平滑和友好。
      5.多进程模式支持不够好。

  4: HAProxy VS Nginx
     HAProxy实际上只是一个负载平衡器/反向代理。Nginx是一个Web服务器，也可以作为反向代理。If needed only for load balancing HA proxy 
     is better. （比Nginx更灵活，还特攻限速功能）
     # https://serverfault.com/questions/229945/what-are-the-differences-between-haproxy-and-ngnix-in-reverse-proxy-mode

三. 现在网站发展的趋势对网络负载均衡的使用是随着网站规模的提升根据不同的阶段来使用不同的技术: 
  第一阶段: 利用Nginx或者HAProxy进行单点的负载均衡，这一阶段服务器规模刚脱离开单服务器、单数据库的模式，需要一定的负载均衡，但是
    仍然规模较小没有专业的维护团队来进行维护，也没有需要进行大规模的网站部署。这样利用Nginx或者HAproxy就是第一选择，此时这些东西
    上手快， 配置容易，在七层之上利用HTTP协议就可以。这时是第一选择
  第二阶段: 随着网络服务进一步扩大，这时单点的Nginx已经不能满足，这时使用LVS或者商用F5就是首要选择，Nginx此时就作为LVS或者 F5的
    节点来使用，具体LVS或者F5的是选择是根据公司规模，人才以及资金能力来选择的，这里也不做详谈，但是一般来说这阶段相关人才跟不上业务
    的提升，所以购买商业负载均衡已经成为了必经之路。
  第三阶段: 这时网络服务已经成为主流产品，此时随着公司知名度也进一步扩展，相关人才的能力以及数量也随之提升，这时无论从开发适合自身产
    品的定制，以及降低成本来讲开源的LVS，已经成为首选，这时LVS会成为主流。
  最终形成比较理想的状态为: F5/LVS<—>Nginx/Haproxy<—>Squid/Varnish<—>AppServer。


















