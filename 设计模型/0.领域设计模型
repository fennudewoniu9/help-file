策略模式、责任链模式和工厂模式是三种常见的设计模式，它们各自解决不同的问题，具有不同的应用场景和特点。以下是它们的区别以及一些类似的设计模式:

1. 策略模式（Strategy Pattern）
  定义: 定义一系列算法，将每个算法封装起来，并使它们可以互相替换。策略模式让算法的变化独立于使用它的客户端。
  核心思想: 将算法的实现与使用分离，通过组合而非继承来实现行为的动态切换。
  示例: 支付方式的选择（支付宝、微信、银行卡等）。 排序算法的选择（快速排序、冒泡排序等）。
  优点: 避免使用多重条件判断。易于扩展新的策略。
  缺点: 客户端需要了解所有策略的实现。

2. 责任链模式（Chain of Responsibility Pattern）
  定义: 将请求的发送者和接收者解耦，使多个对象都有机会处理请求。将这些对象连成一条链，并沿着这条链传递请求，直到有对象处理它为止。策略模式是对算法的抽象，是一种行
  为设计模式；需要什么算法，自己去new然后放入cintext的环境类中；所有算法相当于平行的。责任链模式和策略模式类似，但是两点不同，1：各算法通过类似数据结构中的后继实
  现串行的Handler；2：客户端执行时并不知道具体哪个算法执行，需要Handler自己去判断。请求的多个接收者通过后继的引用连接成的一条链，具体哪个节点处理，节点自己判断。
  如果新增一种策略，需要在客户端new的地方增加一句new；如果新增一个责任链节点，只需要在责任链中的两个引用之间插入一个节点。
  核心思想: 将请求的处理职责分散到多个对象中，避免请求发送者与接收者之间的耦合。
  应用场景: 当需要将请求的处理职责动态分配给多个对象时。当请求的处理流程需要灵活调整时。
  示例: 审批流程（经理、总监、CEO依次审批）。异常处理链（不同级别的异常处理器依次处理）。
  优点: 解耦请求发送者和接收者。动态调整责任链。
  缺点: 请求可能未被处理。责任链过长可能影响性能。

3. Facade，门面模式/外观模式: 门面模式为子系统提供一组统一的接口，定义一组高层接口来封装子系统的复杂性让子系统更易用。解决易用性问题（封装系统的底层实现，隐藏系
   统的复杂性，提供一组更加简单易用、更高层的接口），解决性能问题（多次rpc聚合成一次rpc），解决分布式事务问题（多次rpc变成一次也就实现了单次事务问题）。使得客户
   端可以更简单地与子系统交互。(参考0.6.架构&可观测性.txt)









