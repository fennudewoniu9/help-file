 java不太欢迎继承，因为耦合度高，因为C++的前车之鉴，所以Java发明了接口，以契约的方式向你提供功能。（C++也可以做到这些，那就是定义没有成员变量的纯虚类，而且所有函数都是
纯虚函数。可是这些都是要靠程序员自己把握，并没有把这些功能集成到类似Interface这样的语法里。）

java为什么要有匿名类：有的时候, 为实现一个功能或者实例化一个对象, 需要实现一个接口, 但是接口应用的地方很多, 可是每个地方的实现都不尽相同, 而且需要实例化的地方就只有那么
一两处, 这个时候, 如果为了这些地方, 逐个声明一个类来实现接口的话, 就会浪费很多空间, 还得费时编译, 匿名内部类可以在需要的地方使用接口, 可以在使用的同时实现, 这样不但节省
了空间, 还可以使代码更加明了，内部类的适用范围是“一次就好，我带你去往天涯海角”


ASM: 字节码操作框架--https://www.ibm.com/developerworks/cn/java/j-lo-asm30/index.html
      - ASM 能够通过改造既有类，直接生成需要的代码。增强的代码是硬编码在新生成的类文件内部的，没有反射(java Proxy)带来性能上的付出。
      - 同时，ASM 与 Proxy 编程不同，不需要为增强代码而新定义一个接口，生成的代码可以覆盖原来的类，或者是原始类的子类。
      - 它是一个普通的 Java 类而不是 proxy 类，甚至可以在应用程序的类框架中拥有自己的位置，派生自己的子类。
      - 相比于其他流行的 Java 字节码操纵工具，ASM 更小更快。ASM 具有类似于 BCEL 或者 SERP 的功能，而只有 33k 大小，
      而后者分别有 350k 和 150k。同时，同样类转换的负载，如果 ASM 是 60% 的话，BCEL 需要 700%，而 SERP 需要 1100% 或者更多。

      其实ASM就是通过Visitor模式、职责链模式定义新的职责链，修改方法参数、待执行的方法，然后生成新的class文件或者原class文件的子类。

0.类的家在机制:
1.范型:
2.jvm: 
  2.1.jvm - 算法: 
  2.1.jvm - 垃圾收集器:
  2.1.jvm - 大小设置（GC设置）:
3.[Concurrent]Future:
4.JUC:
  4.1.ThreadLocal:
5.jvm调优、排查命令:

0.类的家在机制: #https://www.jianshu.com/p/202f6abb229c
  父类的静态代码块->子类的静态代码块->初始化父类的属性值/父类的普通代码块(自上而下的顺序排列)->父类的构造方法->初始化子类的属性值/子类的普通代码块(自上而下的顺序排列)->子类的构造方法。
  静态代码块>初始化属性值>普通代码块>构造方法。基本这个逻辑，也就静态代码块特殊点。

1.范型:
	- 类型擦除：对应范型，编译运行时范型会变成其父类（编译后的class文件还是范型）；
	  例如：
		class Node<T> {private T data;}
		Node node = new Node(String.class, null);
		运行时变为：
		Node node = new Node(Object.class, null);
		node.getData();返回的是Object而不是String

	- 编译错误: generic array creation
	  List<Integer>[] arrayOfLists = new List<Integer>[2];
	  java不支持范型数组，支持范型集合。因为范型的类型擦除特征。

	  如果支持的话，一下两个都可以添加，运行时还是会报错。
		arrayOfLists[0] = new ArrayList<String>();
		arrayOfLists[1] = new ArrayList<Integer>();

	- 通配符
		static class CovariantReader<T> {
		    T readCovariant(List<? extends T> list) {
		        return list.get(0);
		    }
		}

	- 边界符
		public class Test<T extends Comparable<T>>{}
		编译后是public class Test<Comparable>{} 而不是 public class Test<Object>{}
		以下代码就不会出错：
		public static <T> int countGreaterThan(T[] anArray, T elem) {
		    int count = 0;
		    for (T e : anArray)
		        if (e > elem)  // compiler error
		            ++count;
		    return count;
		}


# http://blog.csdn.net/hsk256/article/details/49104955
# http://blog.csdn.net/ochangwen/article/details/51407167
2.jvm: 参考PPT
   # jvm 中，程序计数器、虚拟机栈、本地方法栈都是随线程而生随线程而灭，栈帧随着方法的进入和退出做入栈和出栈操作，实现了自动的内存清理，因此，我们的内存垃圾回收
   # 主要集中于 java 堆和方法区中，在程序运行期间，这部分内存的分配和使用都是动态的.
  - 方法区: # 还有一个别名Non-Heap(非堆) ===> java.lang.OutOfMemoryError: PermGen space，
           # 且只有HotSpot才有“PermGen space”，而JRockit（Oracle）、J9（IBM） 并没有“PermGen space”
    1. 有时候也成为永久代，在该区内很少发生垃圾回收，但是并不代表不发生GC，在这里进行的GC主要是对方法区里的常量池和对类型的卸载
    2. 方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。
    3. 该区域是被线程共享的。
    4. 方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。
    # java8 去除永久代增加元数据区Metaspace：https://www.cnblogs.com/paddix/p/5309550.html

  # - 元空间: # ===> java.lang.OutOfMemoryError: Metaspace，
  #    JDK 1.8 中已经不存在永久代的结论，和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因
  #       此，默认情况下，元空间的大小仅受本地内存限制，但可以通过以下参数来指定元空间的大小：
  #       -XX:MetaspaceSize: 初始空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空
  #                          间，那么在不超过MaxMetaspaceSize时，适当提高该值。
  #       -XX:MaxMetaspaceSize: 最大空间，默认是没有限制的。

  # 引入元空间原因:
  #   　1、字符串存在永久代中，容易出现性能问题和内存溢出。
  # 　　2、类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。
  # 　　3、永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。
  # 　　4、Oracle 可能会将HotSpot 与 JRockit 合二为一。

  - 堆: 
    java堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。
    堆被划分为新生代和老年代，新生代又被进一步划分为Eden和Survivor区，而Survivor由FromSpace和ToSpace组成。
    堆大小 = 新生代 + 老年代 (1:2)
    新生代 = Eden + 两个 Survivor(from和to 区域)
            Edem:from:to = 8:1:1
    GC 分为两种: Minor GC、Major GC/Full GC
              Minor GC - 新生代 - 复制算法（简单粗暴） #http://www.importnew.com/15311.html
              Full GC  - 老年代 - 标记-清除算法
    Minor GC: 新生代GC，指发生在新生代的垃圾收集动作，所有的Minor GC都会触发全世界的暂停（stop-the-world），停止应用程序的线程，不过这个过程非常短暂。当年轻代满时
                就会触发Minor GC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。 
    Major GC/Full GC: Full GC是老年代GC，指发生在老年代的GC；MajorGC:指永久代的GC，一般是方法load大数据引起的。Minor GC:新生代GC，指发生在新生代的垃圾收集动作，
                      所有的Minor GC都会触发全世界的暂停。出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，ParallelScavenge 收集器的收集策略里就
                      有直接进行 Major GC 的策略选择过程） 。MajorGC 的速度一般会比Minor GC慢10倍以上。以下几种情况会触发：调用System.gc时、老年代空间不足、方
                      法区空间不足、通过Minor GC后进入老年代的平均大小大于老年代的可用内存。
                      在Java虚拟机规范中，将方法区作为堆的一个逻辑部分来对待，但事实上，方法区并不是堆（Non-Heap）；另外，不少人将Java GC的分代收集机制分为3个代：
                      青年代，老年代，永久代，这些作者将方法区定义为“永久代”，这是因为，对于之前的HotSpot Java虚拟机的实现方式中，将分代收集的思想扩展到了方法区，
                      并将方法区设计成了永久代。不过，除HotSpot之外的多数虚拟机，并不将方法区当做永久代，HotSpot本身，也计划取消永久代。一般在方法区很少进行垃圾回
                      收，因此也被称为永久代，永久代是Major GC，fullGC是整个堆(但是堆又不包括方法区，矛盾点)
    Minor GC和Major GC是俗称: 在Hotspot JVM实现的Serial GC, Parallel GC, CMS, G1 GC中大致可以对应到某个Young GC和Old GC算法组合。
    Young GC: 只收集young gen的GC。当young gen中的eden区分配满的时候触发。注意young GC中有部分存活对象会晋升到old gen，所以young GC后old gen的占用量通常会有所升高。
    Old GC: 只收集old gen的GC。只有CMS的concurrent collection是这个模式。
    Full GC: 收集整个堆，定义是相对明确的，包括young gen、old gen、perm gen（如果存在的话）等所有部分的模式；就是针对整个新生代、老生代、元空间（metaspace，
             java8以上版本取代perm gen）的全局范围的GC。当准备要触发一次young GC时，如果发现统计数据说之前young GC的平均晋升大小比目前old gen剩余的空间大，则
             不会触发young GC而是转为触发full GC（因为HotSpot VM的GC里，除了CMS的concurrent collection之外，其它能收集old gen的GC都会同时收集整个GC堆，包
             括young gen，所以不需要事先触发一次单独的young GC）；或者，如果有perm gen的话，要在perm gen分配空间但已经没有足够空间时，也要触发一次full GC；或
             者System.gc()、heap dump带GC，默认也是触发full GC。
    Mixed GC: 收集整个young gen以及部分old gen的GC。只有G1有这个模式。

    S0/S1/Eden区域是被YoungGC管理，https://www.cnblogs.com/yy3b2007com/p/10975870.html
    
    G1/CMS区别：参考下面的【2.1.jvm - 垃圾收集器】
    # 没有直接设置老年代的参数，但是可以设置堆空间大小和新生代空间大小两个参数来间接控制。

    堆内存 VS 非堆内存: 在JVM中堆之外的内存称为非堆内存(Non-heap memory)。堆内存是留给开发人员使用的；非堆就是JVM留给 自己用的，所以方法区、JVM内部处理或优化所需的内
    存(如JIT编译后的代码缓存)、每个类结构(如运行时常数池、字段和方法数据)以及方法和构造方法 的代码都在非堆内存中。
    
  - 虚拟机栈:
    1. 虚拟机栈也就是我们平常所称的栈内存，它为java方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量、对象引
        用、方法返回值，每一个方法从调用到执行完成，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。通过 -Xss控制大小，如果线
        程请求的栈深度大于虚拟机所允许的深度，会抛出StatckOverflowError。
    2. 虚拟机栈是线程私有的，它的生命周期与线程相同。
    3. 局部变量表里存储的是基本数据类型、returnAddress类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向
        对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定
    4. 操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式
    5. 每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接.动态链接就是
        将常量池中的符号引用在运行期转化为直接引用。

  - 本地方法栈:
    本地方法栈和虚拟机栈类似，只不过本地方法栈为Native方法服务。

  - 程序计数器:
    内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、
    异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个java虚拟机规范没有规定任何OOM
    情况的区域。


  配合spring并发讲解：
    spring默认是单利的，加上@Scope("prototype")后变多例。
    # private static int st = 0;      //静态的，类变量、静态变量（监视器是类对象／对象锁即指其所在的Class对象）
    # private int index = 0;          //非静态，成员变量、实例变量（监视器是实例对象／对象锁即指其所在的实例化对象）
    # @RequestMapping("/test")
    # public String test() {
    #     System.out.println(st++ + " | " + index++);
    #     return "/lsh/ch5/test";
    # }
    # 单利结果：
    # 0 | 0
    # 1 | 1
    # 2 | 2
    # 多例结果：
    # 0 | 0
    # 1 | 0
    # 2 | 0
    原因：st是静态的，被存放在方法区，共享。index是成员变量，每个实例独享。

    单利不会排队、低效，反而并发越高越高效：spring单例模式下用ThreadLocal来切换不同线程之间的参数、保证线程安全，实际上ThreadLoacal的key就是当前
    线程的Thread实例。单例模式下，spring把每个线程可能存在线程安全问题的参数值放进了ThreadLocal。这样虽然是一个实例在操作，但是不同线程下的数据互
    相之间都是隔离的，因为运行时创建和销毁的bean大大减少了，所以大多数场景下这种方式对内存资源的消耗较少，而且并发越高优势越明显。


2.1.jvm - 算法: 
  - 标记 - 清除算法
    之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。
    缺点:
      *一个是效率问题，标记和清除过程的效率都不高
      *另外一个是空间问题，会产生大量不连续内存碎片，当程序在运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作
  
  - 复制算法
    将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉
    缺点:
      *将内存缩小为原来的一半，持续复制长生存期的对象则导致效率降低

  - 标记 - 整理算法（标记-压缩）
    根据老年代的特点，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内
    存，老年代一般不能直接选用这种算法
    缺点:
      *在对象存活率较高时就要执行较多的复制操作，效率将会变低
      *如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法

  - 分代收集算法
    GC分代的基本假设：绝大部分对象的生命周期都非常短暂，存活时间短。把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。
    新生代(存活率高): 复制算法
    老年代(存活率低): 没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收，默认是并行收集器CMS（不会压缩内存空间）


2.1.jvm - 垃圾收集器: #如果说收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现
  # 图片：https://mp.weixin.qq.com/s/olNXcRAT3PTK-hV_ehtmtw

  - 并行 VS 并发: #https://www.cnblogs.com/gossip/p/6100769.html
    并行: 多个线程执行垃圾回收，适合于吞吐量的系统，回收时系统会停止运行，Parallel相关的垃圾回收器如：
        -XX:+UseParallelGC（新生代使用并行回收收集器，老年代使用串行收集器）
        -XX:+UseParallelOldGC（新生代，老年代都使用并行回收收集器）
    并发: 系统线程和垃圾回收线程一起执行，系统不会暂停，适合于响应要求高的系统，回收时系统不会停止运行如：
        -XX:+UseConcMarkSweepGC（设置年老代为并发收集，年轻代并行，适合于响应要求高的系统）

  - 上一代的垃圾收集器(串行serial, 并行parallel, 以及CMS)都把堆内存划分为固定大小的三个部分:年轻代(young generation), 年老代(old generation), 
    以及持久代(permanent generation)。G1收集器没有。

  - Serial收集器:
    串行收集器是最古老，最稳定以及效率高的收集器，会产生较长的停顿，只使用一个线程去回收，垃圾收集的过程中会Stop The World（服务暂停）
    算法: 新生代复制算法、老年代标记-压缩；新生代、老年代使用串行回收
    参数控制: -XX:+UseSerialGC 串行收集器

  - ParNew收集器: （CMS收集器的默认年轻代收集器）
    ParNew收集器其实就是Serial收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和Serial收集器完全一样。它是许多运行在
    Server模式下的虚拟机的首要选择，除了Serial收集器外，目前只有它能与CMS收集器配合工作。CMS收集器是一个被认为具有划时代意义的并发收集器，因此如果有一个垃圾收集器
    能和它一起搭配使用让其更加完美，那这个收集器必然也是一个不可或缺的部分了。在单个CPU环境中，不会比Serail收集器有更好的效果，因为存在线程交互开销。
     算法: 新生代复制算法、老年代标记-压缩；新生代并行，老年代串行
     参数控制: 
       -XX:+UseParNewGC ParNew收集器打开方式（ParNew是CMS收集器的默认年轻代收集器，而使用CMS时吞吐量不高，通过这个发生的次数也可以判断降低吞吐量的时间）
       -XX:ParallelGCThreads 指定垃圾收集的线程数量，ParNew默认开启的收集线程与CPU的数量相
    为什么只有ParNew能与CMS收集器配合: 
    CMS是HotSpot在JDK1.5推出的第一款真正意义上的并发（Concurrent）收集器，第一次实现了让垃圾收集线程与用户线程（基本上）同时工作；CMS作为老年代收集器，但却无法与JDK1.4
    已经存在的新生代收集器Parallel Scavenge配合工作；因为Parallel Scavenge（以及G1）都没有使用传统的GC收集器代码框架，而另外独立实现；而其余几种收集器则共用了部分的框架代码；


  - Parallel Scavenge收集器:
    类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停
    顿时间或最大的吞吐量；也可以通过参数控制GC的时间不大于多少毫秒或者比例。Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器。
    Parallel Scavenge收集器关注点是吞吐量（如何高效率的利用CPU）。
    CMS等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。
    参数控制: 
      -XX:+UseParallelGC 使用Parallel收集器 + 老年代串行
      -XX:MaxGCPauseMillis 控制最大垃圾收集停顿时间
      -XX:GCTimeRatio 设置垃圾收集时间占总时间的比率
      -XX:+UseAdptiveSizePolicy GC自适应的调节策略（GC Ergonomics）开启这个参数后，就不用手工指定一些细节参数，如：
          新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等；JVM会根据当前系统运行情况收集性
          能监控信息，动态调整这些参数，以提供最合适的停顿时间或最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）；这是一种值得推荐的方式：
          *只需设置好内存数据大小（如"-Xmx"设置最大堆）；
          *然后使用"-XX:MaxGCPauseMillis"或"-XX:GCTimeRatio"给JVM设置一个优化目标；
          *那些具体细节参数的调节就由JVM自适应完成；
          这也是Parallel Scavenge收集器与ParNew收集器一个重要区别；

  - Parallel Old 收集器: 
    Parallel Scavenge收集器的老年代版本，这个收集器是在JDK 1.6中才开始提供-XX:+UseParallelOldGC 使用多线程和“标记-整理-压缩”算法。在注重吞吐量以及CPU资源的场合
    ，都可以优先考虑 Parallel Scavenge收集器和Parallel Old收集器。
    -XX:+UseParallelOldGC年轻代使用Parallel Scavenge收集器（控制台显示PS Scavenge），老年代使用Serial收集器（控制台显示PS MarkSweep），但和-XX:+UseParallelGC
    一起使用后控制台还是显示PS MarkSweep：https://www.cnblogs.com/grey-wolf/p/9217497.html


  - CMS收集器:
    基于“标记-清除”算法实现的，是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应、用尤其重视服务的响应速度，
    希望系统停顿时间最短，以给用户带来较好的体验。依然后STW（串行），但是STW整体时间小，且整个CMS会和用户线程穿插着运行。
    整个过程分为4个步骤，包括：
    *初始标记（CMS initial mark）         # 需要“Stop The World”仅仅只是标记一下GC Roots能直接关联到的对象，速度很快
    *并发标记（CMS concurrent mark）      # 进行GC Roots Tracing的过程（判断对象是否仍在使用中）
    *重新标记（CMS remark）               # 修正并发标记期间，因用户程序继续运作导致标记产生变动的那一部分对象的标记记录，停顿时间一般会比初
                                        # 始标记阶段稍长一些，但远比并发标记的时间短。
    *并发清除（CMS concurrent sweep）     # 由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上
                                        # 来说，CMS收集器的内存回收过程是与用户线程一起并发地执行
    优点: 并发收集、低停顿
    缺点: 产生大量空间碎片、并发阶段会降低吞吐量 
    算法: 新生代复制算法、老年代标记-清除，可以这样理解：老年代使用CMS收集器，新生代使用ParNew收集器，因此长时间运行后会产生大量的空间碎片问题，可能导致新生代对象晋升到老生代失败。
    参数控制：
      -XX:+UseConcMarkSweepGC 使用CMS收集器
      -XX:ParallelCMSThreads 设定CMS的线程数量（一般情况约等于可用CPU数量）
      -XX:CMSInitiatingOccupancyFraction，设置CMS预留老年代内存空间可以解决浮动垃圾"Concurrent Mode Failure"失败的问题
      -XX:+UseCMSCompactAtFullCollection 在FULL GC的时候对年老代的压缩。CMS是不会移动内存的，因此非常容易产生碎片导致内存不够用，开启后内存的压缩这个时候就会被启用。增加这个参数是个好习惯。可能会影响性能,但是可以消除碎片
      -XX:+CMSFullGCsBeforeCompaction 设置进行几次Full GC后，进行一次碎片整理，默认为0，也就是说每次都执行Full GC，不会进行压缩整理；
      *"-XX:+UseCMSCompactAtFullCollection"和"-XX:+CMSFullGCsBeforeCompaction"，需要结合使用。

  - G1收集器: 引用Oracle官网的一句话：“G1 is planned as the long term replacement for the Concurrent Mark-Sweep Collector (CMS)”。
    G1是目前技术发展的最前沿成果之一，HotSpot开发团队赋予它的使命是未来可以替换掉JDK1.5中发布的CMS收集器，并且在JDK1.9已经成为默认的收集器。是一款面向服务器的垃圾收
    集器，主要针对配备多颗处理器及大容量内存的机器。G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短stop-The-World停顿时间。部分其他收集器
    原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。以极高概率满足GC停顿时间要求的同时，还具备高吞吐量性能特征与CMS收集器相比G1收
    集器有以下特点：
      1.空间整合，G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。
      2.可预测停顿，这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确
        指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。
      3.分代收集，虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但是还是保留了分代的概念。

   - 为什么G1可以实现可预测停顿:
    1.可以有计划地避免在Java堆的进行全区域的垃圾收集；
    2.G1收集器将内存分大小相等的独立区域（Region），新生代和老年代概念保留，但是已经不再物理隔离。
    3.G1跟踪各个Region获得其收集价值大小，在后台维护一个优先列表；
    4.每次根据允许的收集时间，优先回收价值最大的Region（名称Garbage-First的由来）；

   - 应用场景:
      面向服务端应用，针对具有大内存、多处理器的机器；
      最主要的应用是为需要低GC延迟，并具有大堆的应用程序提供解决方案；
        如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；
        （实践：对账系统中将CMS垃圾收集器修改为G1，降低对账时间20秒以上）
      
      具体什么情况下应用G1垃圾收集器比CMS好，可以参考以下几点（但不是绝对）:
      超过50％的Java堆被活动数据占用；
      对象分配频率或年代的提升频率变化很大；
      GC停顿时间过长（长于0.5至1秒）；
      
      建议:
      如果现在采用的收集器没有出现问题，不用急着去选择G1；
      如果应用程序追求低停顿，可以尝试选择G1；
      是否代替CMS只有需要实际场景测试才知道。（如果使用G1后发现性能还没有使用CMS好，那么还是选择CMS比较好）

   - 配置参数:
      -XX:+UseG1GC: 指定使用G1收集器
      -XX:InitiatingHeapOccupancyPercent: 当整个Java堆的占用率达到参数值时，开始并发标记阶段；默认为45
      -XX:MaxGCPauseMillis: 为G1设置暂停时间目标，默认值为200毫秒
      -XX:G1HeapRegionSize: 设置每个Region大小，范围1MB到32MB；目标是在最小Java堆时可以拥有约2048个Region
      -XX:G1NewSizePercent: 新生代最小值，默认值5%
      -XX:G1MaxNewSizePercent: 新生代最大值，默认值60%
      -XX:ParallelGCThreads: 设置STW期间，并行GC线程数
      -XX:ConcGCThreads: 设置并发标记阶段，并行执行的线程数

   - 回收过程:
    上面提到的垃圾收集器，收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相
    等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔阂了，它们都是一部分（可以不连续）Region的集合。整个过程分为6个步骤，包括：
    *标记阶段，这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC
    *Root Region Scanning，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成
    *Concurrent Marking，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会
      被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。
    *Remark, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初
      始快照算法:snapshot-at-the-beginning (SATB)。
    *Copy／Clean up，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。
    *复制／清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。

  - 总结:
    新生代GC策略 和 老年老代GC策略 一般都是不同收集器组合使用，而G1收集器是同时作用于新老年代，不于其他收集器混用。

  - 在Java语言中，GC Roots包括:
    * 虚拟机栈中引用的对象。
    * 方法区中类静态属性实体引用的对象。
    * 方法区中常量引用的对象。
    * 本地方法栈中JNI引用的对象。

  - 各种GC意义:
    参考上文中堆里的内容


2.1.jvm - 大小设置:
  &控制参数: #https://www.cnblogs.com/likehua/p/3369823.html总
  1.堆设置
     * -Xms: 设置堆的最小空间大小。 #理想情况下，应该和Xmx一样，这可确保在启动时分配最大内存，从而无需在程序执行期间分配额外的内存
     * -Xmx: 设置堆的最大空间大小。 #between 1/2 and 3/4 of physical memory https://community.oracle.com/thread/970695
     * -Xmn: 设置年轻代大小。 # 一般 Xmx >= 1.3Xmn；此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。 //TODO 具体待确定
     * -Xss: 设置每个线程的堆栈大小。
     * -XX:NewSize: 设置新生代最小空间大小。 -Xmn参数是对-XX:NewSize-XX:MaxNewSize这两个参数的同时配置，也就是说如果通过-Xmn来配置新声代的内存大小，那么-XX:NewSize = -XX:MaxNewSize = -Xmn，虽然会很方便，但在JDK1.4后才有效。
     * -XX:MaxNewSize: 设置新生代最大空间大小。
     * -XX:PermSize: 设置永久代最小空间大小。
     * -XX:MaxPermSize=n: 设置持久代最大空间大小。
     * -XX:NewRatio=n: 设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4
     * -XX:SurvivorRatio=n: 年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5
    没有直接设置老年代的参数，但是可以设置堆空间大小和新生代空间大小两个参数来间接控制。

    年轻代: PS Eden Space和PS Survivor Space 对应配置参数:-Xmn256M -XX:MaxNewSize=256M -XX:SurvivorRatio=8(SurvivorRatio:eden/survivor)
    老年代: PS Old Gen 其值是：Old = Heap - Young={Eden,from,to}对应配置参数包括:-Xms512m -Xmx1024m和年轻代的配置参数，from，to的值取决于SurvivorRatio这个参数的设置
    持久代: PS Perm Gen 对应的配置参数:-XX:PermSize=256M -XX:MaxPermSize=512m
    注: 在观察内存的使用情况时首先保证相关的线条不是持续增长的，需要有对应SO、S1区，Eden，old以及Perm和cache回收的动作出现，并且可以估计其回收的内存大小，如果回收始终没
    有增长的多，特别是内存增长很多的情况，这时系统很可能存在内存泄露。这时我们可能需要通过其他的更详细的工具对系统的类及内存进行分析，如JMap等。其中PS Perm Gen被元空间取代了

  2.收集器设置
     * -XX:+UseSerialGC: 设置串行收集器
     * -XX:+UseParallelGC: 设置并行收集器
     * -XX:+UseParalledlOldGC: 设置并行年老代收集器,但和-XX:+UseParallelGC一起使用后控制台和UseParallelGC一样还是显示PS MarkSweep
     * -XX:+UseConcMarkSweepGC: 设置并发收集器，启用CMS

  3.参数设置
     * -XX:ParallelGCThreads=n: 设置并行收集器收集时使用的CPU数。并行收集线程数。
     * -XX:MaxGCPauseMillis=n: 设置并行收集最大暂停时间，一般UseParallelGC只需设置这个jvm就会自动调整
     * -XX:GCTimeRatio=n: 设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)，一般UseParallelGC只需设置这个jvm就会自动调整
     * -XX:+CMSIncrementalMode: 设置为增量模式。适用于单CPU情况。
     * -XX:ParallelGCThreads=n: 设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。
     * -XX:+DisableExplicitGC : System.gc()会导致full gc 这个参数可以自动将System.gc()调用转换成一个空操作，防止应用歇性被暂停。
     * -XX:+CMSClassUnloadingEnabled : 垃圾回收会清理持久代，移除不再使用的classes。这个参数只有在 UseConcMarkSweepGC  也启用的情况下才有用，默认这个是设置为不启用的。
     * -XX:+CMSParallelRemarkEnabled : 采用并行标记方式降低停顿
     * -XX:+UseCMSCompactAtFullCollection : 在FULL GC的时候对年老代的压缩。CMS是不会移动内存的，因此非常容易产生碎片导致内存不够用，开启后内存的压缩这个时候就会被启用。增加这个参数是个好习惯。可能会影响性能,但是可以消除碎片
     * -XX:+LargePageSizeInBytes : 内存页的大小，不可设置过大，会影响Perm的大小，一般128M即可
     * -XX:+UseFastAccessorMethods : 原始类型的快速优化 
     * -XX:+UseCMSInitiatingOccupancyOnly : 使用手动定义初始化定义开始CMS收集
     * -XX:+CMSInitiatingOccupancyFraction : (Xmx-Xmn)*(100-CMSInitiatingOccupancyFraction)/100>=Xmn，使用cms作为垃圾回收时，内存使用70％后开始CMS收集
                                        #上述共识转换后：Xmx >= Xmn + Xmn/(1-CMSInitiatingOccupancyFraction/100)即：如果-XX:CMSInitiatingOccupancyFraction=70，那么Xmx >= 1.3Xmn
     * -XX:+UseAdaptiveSizePolicy: 设置此选项后，并行收集器会自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低相应时间或者收集频率等，此值建议使用并行收集器时，一直打开。
                                   在 JDK 1.8 中，如果使用 CMS，无论 UseAdaptiveSizePolicy 如何设置，都会将 UseAdaptiveSizePolicy 设置为 false。在使用cms算法下，如果开启参数UseAdaptiveSizePolicy，则每次minor gc后
                                   会重新计算eden，from和to的大小，计算过程依据的是gc过程统计的一些数据，计算后的eden+from+to不会超过Xmx，同时from和to一般是不相等（初始化的时候from和to是相等的）。主要问题在于计算完后，如果
                                   eden变大，ContiguousSpacePool里面的max_eden_size并没有被更新，还是最开始时候的值，这样导致jvm在通过call_special调用java.lang.management. MemoryUsage的构造函数的时候会产生exception，
                                   产生exception的原因是eden的committed 大于 eden的max_size，导致返回java.lang.management. MemoryUsage对象失败，最终导致产生显示异常。 目前确认是jvm的bug，初步确认版本为1.6_u30以上，包
                                   括1.7都存在该问题.jdk6.30以下版本还未确认（使用1.6_u25版本后，目前还没有复现问题）---1.6.30以上到1.7的全部版本已经确认有该问题，jdk8修复，其他版本待验证。


     * -XX:+AggressiveOpts: 加快编译     
     * -XX:+UseBiasedLocking: 锁机制的性能改善

  PS: windows会控制一个进程对内存控制的大小，32位的是2G

  &回收器选择:  #https://www.cnblogs.com/likehua/p/3369823.html
    Iapply的配置JAVA_MEM_OPTS=
    " -server -Xmx4g -Xms4g -Xmn600m -Xss256k -XX:+DisableExplicitGC -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC 
    -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods 
    -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 "

    Activity的配置为：
    JAVA_MEM_OPTS=" -server -Xmx6g -Xms6g -Xmn1200m -Xss256k -XX:+DisableExplicitGC -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=256m 
    -XX:+UseParallelGC -XX:+UseParallelOldGC -XX:ParallelGCThreads=4 -XX:MaxGCPauseMillis=100 -XX:+UseAdaptiveSizePolicy 
    -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods"

    Activity因为年老代大部分空间没有使用，年轻代经常打满，调整对应的配置为：
    JAVA_MEM_OPTS=" -server -Xmx6g -Xms6g -XX:NewRatio=1 -Xss256k -XX:+DisableExplicitGC -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=256m 
    -XX:+UseParallelGC -XX:+UseParallelOldGC -XX:ParallelGCThreads=4 -XX:MaxGCPauseMillis=10 -XX:+UseAdaptiveSizePolicy 
    -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods" 调整后的jvm每十分钟PS Scavenge次数少了近一倍

    PS：当有具体大小定义时（-Xmn），那么-XX:NewRatio比例设置将失效！且-XX:SurvivorRatio默认为8，单独使用初始时生效，但是由于-XX:+UseAdaptiveSizePolicy默认开启，后期会自动调节Survivor区的大小，取消自适应即可使得-XX:SurvivorRatio生效！，因为设置了每次年轻袋垃圾回收的最长时间，如果无法满足此时间JVM会自动调整年轻代大小以满足此值
    （Stackoverflow：So the -XX:SurvivorRatio is ignored unless you use -XX:-UseAdaptiveSizePolicy.），XX:NewRatio（年老代/年轻代）的比例默认是2
    （XX:SurvivorRatio=n Ratio of eden/survivor space size. The default value is 8.），但根据activity的监控（最近11小时59分钟共发生608次垃圾回收，平均1分钟
    发生一次，每次耗时11毫秒。 最近10分钟发生了11次垃圾回收，耗时137毫秒。）看年轻代回收频率高，年老代利用率低（190m/4944m），且每次回收耗时没有超过100ms，不会触发年
    轻、年老比例的重分配，应该调整NewRatio。


    1.吞吐量优先的并行收集器
      典型配置:
        * java -Xmx3800m -Xms3800m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20
        -XX:+UseParallelGC: 选择垃圾收集器为并行收集器。此配置仅对年轻代有效。即上述配置下，年轻代使用并发收集，而年老代仍旧使用串行收集。
        -XX:ParallelGCThreads=20: 配置并行收集器的线程数，即：同时多少个线程一起进行垃圾回收。此值最好配置与处理器数目相等。

        * java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20 -XX:+UseParallelOldGC
        -XX:+UseParallelOldGC: 配置年老代垃圾收集方式为并行收集。JDK6.0支持对年老代并行收集。

        * java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC  -XX:MaxGCPauseMillis=100
        -XX:MaxGCPauseMillis=100: 设置每次年轻代垃圾回收的最长时间，如果无法满足此时间，JVM会自动调整年轻代大小，以满足此值。

        * java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC  -XX:MaxGCPauseMillis=100 -XX:+UseAdaptiveSizePolicy
        -XX:+UseAdaptiveSizePolicy: 设置此选项后，并行收集器会自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低相应时间或者收集频率等，此值建议使用并行收集器时，一直打开。

    2.响应时间优先的并发收集器
      典型配置: 
        * java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:ParallelGCThreads=20 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC
        -XX:+UseConcMarkSweepGC: 设置年老代为并发收集。测试中配置这个以后，-XX:NewRatio=4的配置失效了，原因不明。所以，此时年轻代大小最好用-Xmn设置。
        -XX:+UseParNewGC: 设置年轻代为并行收集。可与CMS收集同时使用。JDK5.0以上，JVM会根据系统配置自行设置，所以无需再设置此值。

        * java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection
        -XX:CMSFullGCsBeforeCompaction: 由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩、整理。
        -XX:+UseCMSCompactAtFullCollection: 打开对年老代的压缩。可能会影响性能，但是可以消除碎片

  &调优总结: #https://www.cnblogs.com/likehua/p/3369823.html
    1.年轻代大小选择
    响应时间优先的应用: 尽可能设大，直到接近系统的最低响应时间限制（根据实际情况选择）。在此种情况下，年轻代收集发生的频率也是最小的。同时，减少到达年老代的对象。
    吞吐量优先的应用: 尽可能的设置大，可能到达Gbit的程度。因为对响应时间没有要求，垃圾收集可以并行进行，一般适合8CPU以上的应用。
    
    2.年老代大小选择
    响应时间优先的应用: 年老代使用并发收集器(CMS是不会移动内存的)，所以其大小需要小心设置，一般要考虑并发会话率和会话持续时间等一些参数。如果堆设置小了，可以会造成内存
    碎片、高回收频率以及应用暂停而使用传统的标记清除方式；如果堆大了，则需要较长的收集时间。最优化的方案，一般需要参考以下数据获得：
      *并发垃圾收集信息
      *持久代并发收集次数
      *传统GC信息
      *花在年轻代和年老代回收上的时间比例
    减少年轻代和年老代花费的时间，一般会提高应用的效率
    吞吐量优先的应用: 一般吞吐量优先的应用都有一个很大的年轻代和一个较小的年老代。原因是，这样可以尽可能回收掉大部分短期对象，减少中期的对象，而年老代尽存放长期存活对象。
    
    3.较小堆引起的碎片问题
    因为年老代的并发收集器使用标记、清除算法，所以不会对堆进行压缩。当收集器回收时，他会把相邻的空间进行合并，这样可以分配给较大的对象。但是，当堆空间较小时，运行一段时
    间以后，就会出现“碎片”，如果并发收集器找不到足够的空间，那么并发收集器将会停止(CMS是不会移动内存的)，然后使用传统的标记、清除方式进行回收。如果出现“碎片”，可能需
    要进行如下配置：
      *-XX:+UseCMSCompactAtFullCollection: 使用并发收集器时，开启对年老代的压缩。
      *-XX:CMSFullGCsBeforeCompaction=0: 上面配置开启的情况下，这里设置多少次Full GC后，对年老代进行压缩

# http://www.importnew.com/17572.html
3.[Concurrent]Future:
  创建线程的2种方式，一种是直接继承Thread，另外一种就是实现Runnable接口。
  这2种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。
  如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。
  而自从Java 1.5开始，就提供了Callable和Future，通过它们可以在任务执行完毕之后得到任务执行结果。

  - Callable
    那么怎么使用Callable呢？一般情况下是配合ExecutorService来使用的，在ExecutorService接口中声明了若
    干个submit方法的重载版本：
    #<T> Future<T> submit(Callable<T> task);
    #<T> Future<T> submit(Runnable task, T result);
    #Future<?> submit(Runnable task);
    #//一般情况下我们使用第一个submit方法和第三个submit方法，第二个submit方法很少使用。
    暂时只需要知道Callable一般是和ExecutorService（例：Executors.newCachedThreadPool()，参考下面的）配合来使用的，
    具体的使用方法讲在后面讲述。

  - Future
    Future就是对于具体的Runnable或者Callable任务的执行结果进行取消、查询是否完成、获取结果。必要时可以
    通过get方法获取执行结果，该方法会阻塞直到任务返回结果。
    # public interface Future<V> {
    #     boolean cancel(boolean mayInterruptIfRunning); //具体含义参考3.[concurrent]Future:的URL
    #     boolean isCancelled();
    #     boolean isDone();
    #     // 获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回；
    #     V get() throws InterruptedException, ExecutionException;
    #     // 获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null。
    #     V get(long timeout, TimeUnit unit)
    #         throws InterruptedException, ExecutionException, TimeoutException;
    # }  

  - FutureTask
    因为Future只是一个接口，所以是无法直接用来创建对象使用的，因此就有了FutureTask。
    # public class FutureTask<V> implements RunnableFuture<V>

    # public interface RunnableFuture<V> extends Runnable, Future<V> {
    #     void run();
    # }
    Callable可以获取返回值，Callable需要和Future一起使用，FutureTask实现了RunnableFuture，RunnableFuture:
    继承了Runnable, Future。所以它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。:
    FutureTask提供了2个构造器：
    # public FutureTask(Callable<V> callable) {
    # }
    # public FutureTask(Runnable runnable, V result) {
    # }
    事实上，FutureTask是Future接口的一个唯一实现类。

  - 使用示例
    * Callable+Future获取执行结果
        ExecutorService executor = Executors.newCachedThreadPool();
        Callable<Integer> task = new SelfTask();
        Future<Integer> result = executor.submit(task);
        executor.shutdown();
    * Callable+FutureTask获取执行结果
        ExecutorService executor = Executors.newCachedThreadPool();
        //第一种方式
        Callable<Integer> task = new SelfTask();
        FutureTask<Integer> futureTask = new FutureTask<Integer>(task);
        executor.submit(futureTask);
        executor.shutdown();
        //第二种方式，注意这种方式和第一种方式效果是类似的，只不过一个使用的是ExecutorService，一个使用的是Thread
        /*Callable<Integer> task = new SelfTask();
        FutureTask<Integer> futureTask = new FutureTask<Integer>(task);
        Thread thread = new Thread(futureTask);
        thread.start();*/
    参考：http://www.importnew.com/17572.html
    
  - ExecuteService: 
    * 各种线程池的区别
      # http://zy116494718.iteye.com/blog/1704344
      Executors.newCachedThreadPool();Executors.newFixedThreadPool();等.....的区别。
      1.newCachedThreadPool: 可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
                       # Threads that have not been used for sixty seconds are terminated and removed from the cache.
      2.newFixedThreadPool: 定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
      3.newScheduledThreadPool: 定长线程池，支持定时及周期性任务执行。
      4.newSingleThreadExecutor: 单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。

    * 服务的关闭
      # http://blog.csdn.net/bairrfhoinn/article/details/16848785
      当ExecutorService使用完毕后，应该关闭它，这样才能保证线程不会继续保持运行状态，否则会阻止Java虚拟机关闭。
      为了关闭在 ExecutorService 中的线程，你需要调用 shutdown() 方法。ExecutorService 并不会马上关闭，而是不再
      接收新的任务，壹但所有的线程结束执行当前任务，ExecutorServie 才会真的关闭。所有在调用 shutdown() 方法之前提交
      到 ExecutorService 的任务都会执行。
      如果你希望立即关闭 ExecutorService，你可以调用 shutdownNow() 方法。这個方法会尝试马上关闭所有正在执行的任务，
      并且跳过所有已经提交但是还没有运行的任务。但是对于正在执行的任务，是否能够成功关闭它是无法保证的，有可能他们真的被关
      闭掉了，也有可能它会壹直执行到任务结束。这是壹個最好的尝试。

  - Semaphore(信号量): 
    * 原理 & 公平模式
      信号量是一个计数器，用来控制同时多少个进程对共享资源的访问。
      默认为非公平的(可以插队)并非先来的先获取信号量。主要作为进程间及同一进程内不同线程间的同步手段。拿到信号量的线程可以进入代码，否则就等待。

    * 与线程池 ExecuteService 的区别
      # http://bbs.csdn.net/topics/390985879
      Semaphore信号量用来控制最大并发执行的线程数量的锁，实际线程数可能大于Semaphore设定的最大并发数，只是被挂起了而已；FixedThreadPool
      等线程池是用来控制最大线程数。 # 线程池控制的是线程数量，而信号量控制的是并发数量


4.JUC:
  - 概念: 
    start: 作用是启动一个新线程，新线程会执行相应的run()方法。start()不能被重复调用。
    run: 和普通的成员方法一样，可以被重复调用。单独调用run()的话，会在当前线程中执行run()，而并不会启动新线程！

    wait: 线程进入阻塞状态，释放锁，notify来唤醒
    yeild: 线程进入就绪状态，不释放锁，同优先级的线程未必会立马获得执行权限，该线程可能继续运行
    sleep: 线程进入休眠状态，指定休眠多久，不释放锁
    interrupted: 本线程中断自己是被允许的；其它线程调用本线程的interrupt()方法时，会通过checkAccess()检查权限。这有可能抛出SecurityException
    异常。如果本线程是处于阻塞状态，调用线程的wait(), wait(long)或wait(long, int)会让它进入等待(阻塞)状态，调用了它的interrupt()方法，那
    么它的“中断状态”会被清除并且会收到一个InterruptedException异常。

    LockSupport: 是用来创建锁和其他同步类的基本线程阻塞原语。park和wait的区别。wait让线程阻塞前，必须通过synchronized获取同步锁。LockSupport
    中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程，而且park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死
    锁”问题。
    # Thread mainThread = Thread.currentThread();
    # LockSupport.park(mainThread);
    # LockSupport.unpark(mainThread);

    * synchronized与lock: sync是控制不同线程之间访问权限不可重入，lock是控制包括自己在内的线程间访问权限可重入，且sync的粒度是包括this的对象（其
    实是对象监视器），比lock的粒度大（即同一个thread也不能重入）lock是通过AQS中的state（int）和以Thread为key来配合控制访问权限的。且sync一旦被某
    个线程获取，所有sync修饰的代码快、方法等都会阻塞，但非sync部分不会。
    * reentrantlock 和 synchronized区别: jdk优化（借鉴了reentranlocak的cas）之后建议优先使用synchronnized，但一下三种情况例外：
      - 多个条件作为getlock的条件
      - 可中断等待避免阻塞
      - 希望指定以公平或者非公平的方式获取锁
    * synchronized: 
    同步锁也叫对象锁，是锁在对象上的，不同的对象就是不同的锁。
    该关键字是用于保证线程安全的，是阻塞式的解决方案。synchronized 也是可重入锁
    让同一个时刻最多只有一个线程能持有对象锁，其他线程在想获取这个对象锁就会被阻塞，不用担心上下文切换的问题。
    注意： 不要理解为一个线程加了锁 ，进入 synchronized代码块中就会一直执行下去。如果时间片切换了，也会执行其他线程，再切换回来会紧接着执行，只是不会执行到有竞争锁的资源，因为当前线程还未释放锁。
    当一个线程执行完synchronized的代码块后 会唤醒正在等待的线程
    synchronized实际上使用对象锁保证临界区的原子性 临界区的代码是不可分割的 不会因为线程切换所打断

    * Condition的await()、signal()与Object的await()、signal(): Object中的wait(),notify(),notifyAll()方法是和"同步锁"(synchronized)捆绑
    使用的；而Condition是需要与"互斥锁"/"共享锁"捆绑使用的。

  - AQS & Sync:
    AQS(AbstractQueuedSynchronizer类)是一个用来构建锁和同步器的框架,它在内部定义了一个int state变量,用来表示同步状态.在LOCK包中的相关锁(
    常用的有ReentrantLock、 ReadWriteLock)都是基于AQS来构建.然而这些锁都没有直接来继承AQS,而是定义了一个Sync类去继承AQS.那么为什么要这样
    呢?because:锁面向的是使用用户,而同步器面向的则是线程控制,那么在锁的实现中聚合同步器而不是直接继承AQS就可以很好的隔离二者所关注的事情.（其实在
    ReentrantLock中都有一个类似AQS的结构，即内部类Sync，而ReentrantLock、 ReadWriteLock实现了Lock接口，成员方法也是一些针对锁的操作，这也就
    是上面说的锁和访问器分开的低层实现）
    # 链接：https://zhuanlan.zhihu.com/p/27134110
    AQS中Node成员变量: 
        volatile Node prev;
        volatile Node next;
        # 由此可见AQS是一个双向链表

  - ReentrantLock: 是一个“可重入”的互斥锁，又被称为“独占锁”。关键方法Sync中的tryAcquire(int acquires);可重入是因为每次tryAcquire的时候
    会有如下判断：else if (current == getExclusiveOwnerThread()) 。互斥的核心是int state。
      lock: 获取锁。
        lock中的方法:
        final void lock() {
            if (compareAndSetState(0, 1))
                setExclusiveOwnerThread(Thread.currentThread());
            else
                acquire(1);
        }
        AQS中的方法:
        public final void acquire(int arg) {
            if (!tryAcquire(arg) &&
                acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
                selfInterrupt();
        }
        其中addWaiter方法是把当前尝试获取锁的thread加入到等待队列，
        # private Node addWaiter(Node mode) {
        #     Node node = new Node(Thread.currentThread(), mode);
        #     // Try the fast path of enq; backup to full enq on failure
        #     Node pred = tail;
        #     if (pred != null) {
        #         node.prev = pred;
        #         if (compareAndSetTail(pred, node)) {
        #             pred.next = node;
        #             return node;
        #         }
        #     }
        #     enq(node);
        #     return node;
        # }

  - FairSync & NonfairSync: 尝试占用state的时候，是否先进行一次判断（hasQueuedPredecessors()：返回当前等待队列(CLH队列)是否有等待的线程）
    FairSync:
        protected int tryAcquireShared(int acquires) {
              for (;;) {
                  if (hasQueuedPredecessors() // # 区别 #
                      return -1; 
                  int available = getState();
                  int remaining = available - acquires;
                  if (remaining < 0 ||
                      compareAndSetState(available, remaining))
                      return remaining;
              }
          }
    NonfairSync:
        final int nonfairTryAcquireShared(int acquires) {
            for (;;) {
                int available = getState();
                int remaining = available - acquires;
                if (remaining < 0 ||
                    compareAndSetState(available, remaining))
                    return remaining;
            }
        }
        

  - ConcurrentHashMap: 线程安全的哈希表，它是通过“锁分段”来保证线程安全的。ConcurrentHashMap将哈希表分成许多片段(Segment)，每一个片段除
    了保存哈希表之外，本质上也是一个“可重入的互斥锁”(ReentrantLock)。多线程对同一个片段的访问，是互斥的；但是，对于不同片段的访问，却是可以同
    步进行的。底层是Node组成的单向链表。发生hash碰撞后存链表尾部，如果长度大于8就把链表换成红黑树。

  - CopyOnWriteArrayList: 线程安全的可变数组，通常保持很小，只读操作远多于可变操作；因为通常需要复制整个基础数组，所以可变操作（add()、set()
    和 remove() 等等）的开销很大。

  - ArrayBlockingQueue: 是数组实现的线程安全的有界（int count）的阻塞队列。仅在take取时候阻塞；按FIFO（先进先出）原则对元素进行排序，都是
    从尾部插入到队列，从头部开始返回。
    成员变量:
      final Object[] items;
      int count;
      final ReentrantLock lock;
      private final Condition notEmpty;
      private final Condition notFull;
      transient Itrs itrs = null;//Itr是实现了Iterator接口的类

  - 以上三个除ConcurrentHashMap之外，add之前都是进行：
        # final ReentrantLock lock = this.lock;
        # lock.lock();


4.1.ThreadLocal: # 与Thread同级目录的类
  ThreadLocal存取的数据，总是与当前线程相关，也就是说，JVM 为每个运行的线程，绑定了私有的本地实例存取空间，从而为多线程环境常出现的并发访问问题
  提供了一种隔离机制。ThreadLocal是如何做到为每一个线程维护变量的副本的呢？其实实现的思路很简单，在ThreadLocal类中有一个Map，用于存储每一个线
  程的变量的副本。初始化方法：
    # public T get() {
    #     Thread t = Thread.currentThread();
    #     ThreadLocalMap map = getMap(t);  //ThreadLocalMap是ThreadLocal的静态内部类
    #     if (map != null) {
    #         ThreadLocalMap.Entry e = map.getEntry(this);
    #         if (e != null) {
    #             @SuppressWarnings("unchecked")
    #             T result = (T)e.value;
    #             return result;
    #         }
    #     }
    #     return setInitialValue();
    # }

5.jvm调优、排查命令: #命令行工具：jps、jstack、jmap、jhat、jstat、hprof：https://www.jianshu.com/p/f9facd4b85e0
  对于线上系统突然产生的运行缓慢问题，如果该问题导致线上系统不可用，那么首先需要做的就是，导出jstack和内存信息，然后重启系统，尽快保证系统的可用性。这种情况可能的原因主要有两种：
    - 代码中某个位置读取数据量较大，导致系统内存耗尽，从而导致Full GC次数过多，系统缓慢；
    - 代码中有比较耗CPU的操作，导致CPU过高，系统运行缓慢；
  排查步骤:
    - 1.查询占用资源最高的进程: top （查出来占用资源最大的进程125990）
        查询改进程的线程情况: top -H -p 125990（可以不加H。H:让top输出某个特定进程<pid>并检查该进程内运行的线程状况,p:指定进程号）
    - 2.用jstack查看堆栈信息: sudo jstack 进程id（在jsatck命令展示的结果中，线程id都转换成了十六进制形式（nid=0x1ec38），如果想和第二步的12590匹配需要转换一次）
    - 3.用jstat命令监控GC情况: jstat -gcutil/-gc 125990 1000 10：每一秒刷新一次，共刷新十次，gcutil是百分比，gc是明细（jstat -选项 VM的进程号即当前运行的java进程号 间隔时间 打印次数---jstat-gcutil<pid><period><times>命令监控当前系统的GC状况）
    - 4.用jmap查看heap的情况: jmap -heap 125990  (-heap是dump堆内存；-dump是dump整个jvm内存，但是会比较大(2G左右)，具体视应用而定)


  jsp(Java Virtual Machine Process Status Tool): 查看系统内所有HotSpot虚拟机进程
  jstack: 查看虚拟机当前时刻的线程快照。主要目的是用来定位线程长时间停顿的原因，如死循环、线程间死锁、外部资源请求时间过长等。
  jstat: 查看运行时状态（类装载、内存、垃圾收集等运行时数据）https://www.jianshu.com/p/07cdd23ee57c
  jmap(Memory Map): 生成堆dump文件、查看堆的配置和其中各个区域的使用情况，一般用来看各区域的使用情况，也可以dump整个jvm内存的情况，但是会比较大(2G左右)
  jinfo: 查看虚拟机运行时参数

  具体用法：（命令-进程ID）
  jinfo-20914
  jmap-20914
  jmap-dump-20914 #文件会非常大
  jmap-heap-20914
  jstack-20914
  jstat-gccapacity-20914
  jstat-gcutil-20914






